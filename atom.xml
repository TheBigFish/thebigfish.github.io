<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>理想-咸鱼</title>
  
  <subtitle>鱼翔浅底</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-16T08:03:01.522Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>bigfish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/01/16/hello-world/"/>
    <id>http://yoursite.com/2020/01/16/hello-world/</id>
    <published>2020-01-16T08:03:01.521Z</published>
    <updated>2020-01-16T08:03:01.522Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>hello,hexo</title>
    <link href="http://yoursite.com/2020/01/15/hello-hexo/"/>
    <id>http://yoursite.com/2020/01/15/hello-hexo/</id>
    <published>2020-01-15T01:01:04.000Z</published>
    <updated>2020-01-16T08:03:01.521Z</updated>
    
    <content type="html"><![CDATA[<p>hello, hexo!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hello, hexo!&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>uefi security boot 实现细节</title>
    <link href="http://yoursite.com/2020/01/08/uefi-security-boot--shi-xian-xi-jie/"/>
    <id>http://yoursite.com/2020/01/08/uefi-security-boot--shi-xian-xi-jie/</id>
    <published>2020-01-08T03:10:46.000Z</published>
    <updated>2020-01-08T03:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="uefi-security-boot-实现细节"><a href="#uefi-security-boot-实现细节" class="headerlink" title="uefi security boot 实现细节"></a>uefi security boot 实现细节</h1><h2 id="密钥体系"><a href="#密钥体系" class="headerlink" title="密钥体系"></a>密钥体系</h2><p><img src="https://github.com/TheBigFish/blog/raw/master/assets/security_boot_01.png" alt=""></p><h3 id="PKpub"><a href="#PKpub" class="headerlink" title="PKpub"></a>PKpub</h3><blockquote><p>Platform Key</p></blockquote><ul><li>确定平台所有者和平台固件之间的信任关系</li><li>BIOS 厂商 / OEM 创建这个 KEY</li><li>PK 是自签名</li><li>PKpriv 的所有者必须保证私钥的安全 </li></ul><h3 id="KEKpub"><a href="#KEKpub" class="headerlink" title="KEKpub"></a>KEKpub</h3><blockquote><p>Key Exchange Key </p></blockquote><ul><li>确定平台固件和操作系统之间的信任关系</li><li>KEY 用来对 db/dbx 进行签名</li><li>操作系统厂商提供</li><li>OEM 也可提供自己的 KEY 对 shell app 进行签名</li></ul><h3 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h3><blockquote><p>合规数据库</p></blockquote><ul><li>用来存放运行被执行的代码的签名，或者存储证书</li><li>OEM 可以把 IHV(独立硬件厂商）的签名放在 DB 里面，用来对第三方 OpROMs（UEFI CA) 进行校验</li><li>MS CA / UEFI CA 由 MSFT 提供.</li></ul><h3 id="DBX"><a href="#DBX" class="headerlink" title="DBX"></a>DBX</h3><blockquote><p>禁止数据库</p></blockquote><ul><li>用来存储禁止执行代码的签名</li><li>或者被禁止的公司的证书</li></ul><h3 id="KEY-的生成过程"><a href="#KEY-的生成过程" class="headerlink" title="KEY 的生成过程"></a>KEY 的生成过程</h3><p><img src="https://github.com/TheBigFish/blog/raw/master/assets/security_boot_02.png" alt=""></p><p>db 及 dbx 存放的是记录以及由某个 KEK 对该记录进行签名的数据，记录可以是：<br>1. efi 文件的 hash 值<br>2. efi 文件的签名数据<br>3. 对 efi 文件进行签名的证书</p><p>PK 由平台所有者持有，比如联想<br>KEK 由 PK 签名</p><p>db/dbx 数据进行更新时，bios 需要进行授权验证，验证该更新数据是否是由某个 KEK 进行签名，若验证通过，则将该条记录及其对应的签名数据存入 db/dbx。</p><p>MSCApri 以及 UEFICApri 可以对厂商提供的驱动进行签名。</p><h4 id="驱动更新流程"><a href="#驱动更新流程" class="headerlink" title="驱动更新流程"></a>驱动更新流程</h4><p>比如某个显卡厂商 Card</p><ul><li><p>使用自己的私钥 (Cardpri) 对自己的驱动进行签名生成 CardSign，(其证书为 CardCert)。</p></li><li><p>找 UEFICApri 对自己的数据（CardSign、CardCert）进行签名，生成 (（CardSign，UEFICApri_CardSign_Sign ）（CardCert，UEFICApri_CardCert_Sign ）） 。</p></li><li><p>调用 bios 接口进行更新，更新数据为 (（CardSign，UEFICApri_CardSign_Sign ）（CardCert，UEFICApri_CardCert_Sign ））</p></li><li><p>bios 中有 UEFICApub 对应的 KEY (UEFIKEKpub)</p></li><li><p>bios 遍历 KEK，使用 KEK 对 (（CardSign，UEFICApri_CardSign_Sign ）（CardCert，UEFICApri_CardCert_Sign ））进行验签</p></li><li><p>验签通过，将条目 （CardSign，UEFICApri_CardSign_Sign）、（CardCert，UEFICApri_CardCert_Sign）存入 db</p></li></ul><h4 id="efi-文件无签名数据的情况"><a href="#efi-文件无签名数据的情况" class="headerlink" title="efi 文件无签名数据的情况"></a>efi 文件无签名数据的情况</h4><p>按照上述校验流程，显卡厂商也可以不使用自己的私钥对驱动签名，而只是生成一个哈希值。<br>再使用 UEFICApri 对哈希值进行签名生成  (CardHash, UEFICApri_CardHash_Sign)。</p><p>要将该哈希及对应签名信息更新到 db 时，仍然要使用 KEK 验证 UEFICApri_CardHash_Sign。</p><p>使用 hash 值的 efi 文件在启动时，只需要验证该 efi 文件的 hash 是否匹配 db/dbx 中的某个 hash。</p><h4 id="驱动校验流程"><a href="#驱动校验流程" class="headerlink" title="驱动校验流程"></a>驱动校验流程</h4><ul><li>bios 验证显卡驱动</li><li>显卡驱动中由对应的签名的证书（CardCert）信息。</li><li>遍历 db 找到 CardCert</li><li>使用 CardCert 对 db 中所有类型为签名值的条目进行验证</li><li>如果某条验证通过，则校验通过</li></ul><h4 id="dbx"><a href="#dbx" class="headerlink" title="dbx"></a>dbx</h4><p>dbx 内容与 db 中数据格式一致，匹配 dbx 中数据则认为验证失败</p><h4 id="MSCApri-与-UEFICApri"><a href="#MSCApri-与-UEFICApri" class="headerlink" title="MSCApri 与 UEFICApri"></a>MSCApri 与 UEFICApri</h4><p>市面上已经有大量使用 MSCApri 以及 UEFICApri 签名的 efi。</p><p>要加入该体系，只需要，使用 PKpri 对 MSCApub 及 UEFICApub 进行签名，生成对应的两个 KEK:  MSKEKpub  UEFIKEKpub。</p><p>将该两个 KEK 加入 bios , 即可以支持已签名的 efi。</p><h4 id="OS-Loader"><a href="#OS-Loader" class="headerlink" title="OS Loader"></a>OS Loader</h4><blockquote><p>比如 grub</p></blockquote><p>OS Loader 使用 MSCApri 签名，对应的 MSCApub 存储于 db，同时 MSKEKpub 也内置于 bios。</p><h3 id="db-dbx-防篡改"><a href="#db-dbx-防篡改" class="headerlink" title="db/dbx 防篡改"></a>db/dbx 防篡改</h3><p>db/dbx 每条记录都是 数据以及使用 KEK 对该数据的签名。<br>bios 启动时，逐条遍历记录并验证签名。</p><h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p>通过使用分级密钥体系</p><ul><li>平台所有者只持有 PKpri</li><li>各级板卡厂商及操作系统厂商可以使用各自的公私钥体系对数据进行签名</li><li>平台所有者通过签名各级厂商的公钥生成 KEK, 将平台所有者认为可信的厂商加入信任</li></ul><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/15" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/15</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;uefi-security-boot-实现细节&quot;&gt;&lt;a href=&quot;#uefi-security-boot-实现细节&quot; class=&quot;headerlink&quot; title=&quot;uefi security boot 实现细节&quot;&gt;&lt;/a&gt;uefi security boo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python 类函数绑定方法的实现</title>
    <link href="http://yoursite.com/2019/12/18/python--lei-han-shu-bang-ding-fang-fa-de-shi-xian/"/>
    <id>http://yoursite.com/2019/12/18/python--lei-han-shu-bang-ding-fang-fa-de-shi-xian/</id>
    <published>2019-12-18T07:43:27.000Z</published>
    <updated>2019-12-18T08:08:11.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-类函数绑定方法的实现"><a href="#python-类函数绑定方法的实现" class="headerlink" title="python 类函数绑定方法的实现"></a>python 类函数绑定方法的实现</h1><h2 id="实现一个函数描述器"><a href="#实现一个函数描述器" class="headerlink" title="实现一个函数描述器"></a>实现一个函数描述器</h2><blockquote><p>This means that all functions are non-data descriptors which return bound methods when they are invoked from an object.</p></blockquote><p>所有的函数都是一个无数据的描述器。类实例调用函数即触发描述器语法，该描述器在类实例被调用时，返回一个绑定的普通方法。</p><p>下面实现了一个纯 python 的描述器 BindFunction, 用来绑定方法 f_normal 到函数 f。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(self, name)</span><br><span class="line">d=D()</span><br><span class="line">d.f(<span class="string">"hello"</span>)</span><br><span class="line">D.f(d, <span class="string">"hello"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f_normal</span><span class="params">(self, name)</span>:</span></span><br><span class="line">    print(self, name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindFunction</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        wraps(func)(self)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__wrapped__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype=None)</span>:</span></span><br><span class="line">        <span class="string">"Simulate func_descr_get() in Objects/funcobject.c"</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self</span><br><span class="line">        <span class="keyword">return</span> types.MethodType(self,  obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    f = BindFunction(f_normal)</span><br><span class="line"></span><br><span class="line">d = D()</span><br><span class="line">d.f(<span class="string">"world"</span>)</span><br><span class="line">D.f(d, <span class="string">"world"</span>)</span><br></pre></td></tr></table></figure><p>类 BindFunction 也可以实现如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindFunction</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self.func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__get__</span><span class="params">(self, obj, objtype=None)</span>:</span></span><br><span class="line">        <span class="string">"Simulate func_descr_get() in Objects/funcobject.c"</span></span><br><span class="line">        <span class="keyword">if</span> obj <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> self.func</span><br><span class="line">        <span class="keyword">return</span> types.MethodType(self.func,  obj)</span><br></pre></td></tr></table></figure><h2 id="Functions-and-Methods"><a href="#Functions-and-Methods" class="headerlink" title="Functions and Methods"></a>Functions and Methods</h2><p><a href="https://docs.python.org/3/howto/descriptor.html?highlight=types%20methodtype#functions-and-methods" target="_blank" rel="noopener">Functions and Methods</a></p><blockquote><pre><code>Python’s object oriented features are built upon a function based environment. Using non-data descriptors, the two are merged seamlessly.</code></pre></blockquote><pre><code>Class dictionaries store methods as functions. In a class definition, methods are written using def or lambda, the usual tools for creating functions. Methods only differ from regular functions in that the first argument is reserved for the object instance. By Python convention, the instance reference is called self but may be called this or any other variable name.To support method calls, functions include the __get__() method for binding methods during attribute access. This means that all functions are non-data descriptors which return bound methods when they are invoked from an object. In pure Python, it works like this:class Function(object):    . . .    def __get__(self, obj, objtype=None):        &quot;Simulate func_descr_get() in Objects/funcobject.c&quot;        if obj is None:            return self        return types.MethodType(self, obj)Running the interpreter shows how the function descriptor works in practice:&gt;&gt;&gt;&gt;&gt;&gt; class D(object):...     def f(self, x):...         return x...&gt;&gt;&gt; d = D()# Access through the class dictionary does not invoke __get__.# It just returns the underlying function object.&gt;&gt;&gt; D.__dict__[&apos;f&apos;]&lt;function D.f at 0x00C45070&gt;# Dotted access from a class calls __get__() which just returns# the underlying function unchanged.&gt;&gt;&gt; D.f&lt;function D.f at 0x00C45070&gt;# The function has a __qualname__ attribute to support introspection&gt;&gt;&gt; D.f.__qualname__&apos;D.f&apos;# Dotted access from an instance calls __get__() which returns the# function wrapped in a bound method object&gt;&gt;&gt; d.f&lt;bound method D.f of &lt;__main__.D object at 0x00B18C90&gt;&gt;# Internally, the bound method stores the underlying function,# the bound instance, and the class of the bound instance.&gt;&gt;&gt; d.f.__func__&lt;function D.f at 0x1012e5ae8&gt;&gt;&gt;&gt; d.f.__self__&lt;__main__.D object at 0x1012e1f98&gt;&gt;&gt;&gt; d.f.__class__&lt;class &apos;method&apos;&gt;</code></pre><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/14" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/14</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-类函数绑定方法的实现&quot;&gt;&lt;a href=&quot;#python-类函数绑定方法的实现&quot; class=&quot;headerlink&quot; title=&quot;python 类函数绑定方法的实现&quot;&gt;&lt;/a&gt;python 类函数绑定方法的实现&lt;/h1&gt;&lt;h2 id=&quot;实现一个函
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>codeblock 链接 openssl 库文件</title>
    <link href="http://yoursite.com/2019/07/17/codeblock--lian-jie--openssl--ku-wen-jian/"/>
    <id>http://yoursite.com/2019/07/17/codeblock--lian-jie--openssl--ku-wen-jian/</id>
    <published>2019-07-17T02:33:13.000Z</published>
    <updated>2019-07-17T02:33:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="codeblock-链接-openssl-库文件"><a href="#codeblock-链接-openssl-库文件" class="headerlink" title="codeblock 链接 openssl 库文件"></a>codeblock 链接 openssl 库文件</h1><h2 id="安装-codeblock"><a href="#安装-codeblock" class="headerlink" title="安装 codeblock"></a>安装 codeblock</h2><pre><code>版本为： codeblocks-17.12mingw-setup.exegcc: 5.1.0</code></pre><h2 id="安装-MSYS-1-0-10-exe"><a href="#安装-MSYS-1-0-10-exe" class="headerlink" title="安装 MSYS-1.0.10.exe"></a>安装 MSYS-1.0.10.exe</h2><pre><code>将 `CodeBlocks\MinGW` 下文件拷贝至 `msys\1.0\mingw`gcc -v 输出版本号即成功</code></pre><h2 id="安装-perl-5"><a href="#安装-perl-5" class="headerlink" title="安装 perl 5"></a>安装 perl 5</h2><pre><code>strawberry-perl-5.30.0.1-64bit.msi</code></pre><h2 id="编译-openssl"><a href="#编译-openssl" class="headerlink" title="编译 openssl"></a>编译 openssl</h2><pre><code>- 版本 openssl-1.0.2j.tar.gz- 编译    - ./config    - make    - make test    - make install编译后文件位于 `msys\1.0\local\ssl`</code></pre><h2 id="配置-codeblock"><a href="#配置-codeblock" class="headerlink" title="配置 codeblock"></a>配置 codeblock</h2><pre><code>- project -&gt; build options -&gt; linker settings 增加：    - libcrypto.a    - libssl.a    - libgdi32.a- project -&gt; build options -&gt; search directories 增加：    - msys\1.0\local\ssl\include</code></pre><p>完成 </p><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/13" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/13</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;codeblock-链接-openssl-库文件&quot;&gt;&lt;a href=&quot;#codeblock-链接-openssl-库文件&quot; class=&quot;headerlink&quot; title=&quot;codeblock 链接 openssl 库文件&quot;&gt;&lt;/a&gt;codeblock 链接 o
      
    
    </summary>
    
    
    
      <category term="C" scheme="http://yoursite.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码之coroutine分析</title>
    <link href="http://yoursite.com/2019/01/16/tornado-yuan-ma-zhi-coroutine-fen-xi/"/>
    <id>http://yoursite.com/2019/01/16/tornado-yuan-ma-zhi-coroutine-fen-xi/</id>
    <published>2019-01-16T06:16:02.000Z</published>
    <updated>2019-01-17T06:50:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tornado-源码之-coroutine-分析"><a href="#tornado-源码之-coroutine-分析" class="headerlink" title="tornado 源码之 coroutine 分析"></a>tornado 源码之 coroutine 分析</h1><blockquote><p>tornado 的协程原理分析<br>版本：4.3.0</p></blockquote><p>为支持异步，tornado 实现了一个协程库。</p><p>tornado 实现的协程框架有下面几个特点：</p><ol><li>支持 python 2.7，没有使用 yield from<br>特性，纯粹使用 yield 实现</li><li>使用抛出异常的方式从协程返回值</li><li>采用 Future 类代理协程（保存协程的执行结果，当携程执行结束时，调用注册的回调函数）</li><li>使用 IOLoop 事件循环，当事件发生时在循环中调用注册的回调，驱动协程向前执行</li></ol><p>由此可见，这是 python 协程的一个经典的实现。</p><p>本文将实现一个类似 tornado 实现的基础协程框架，并阐述相应的原理。</p><h2 id="外部库"><a href="#外部库" class="headerlink" title="外部库"></a>外部库</h2><p>使用 time 来实现定时器回调的时间计算。<br>bisect 的 insort 方法维护一个时间有限的定时器队列。<br>functools 的 partial 方法绑定函数部分参数。<br>使用 backports_abc 导入 Generator 来判断函数是否是生成器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> bisect</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">from</span> backports_abc <span class="keyword">import</span> Generator <span class="keyword">as</span> GeneratorType</span><br></pre></td></tr></table></figure><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><blockquote><p>是一个穿梭于协程和调度器之间的信使。<br>提供了回调函数注册 (当异步事件完成后，调用注册的回调)、中间结果保存、结束结果返回等功能</p></blockquote><p>add_done_callback 注册回调函数，当 Future 被解决时，改回调函数被调用。<br>set_result 设置最终的状态，并且调用已注册的回调函数</p><p>协程中的每一个 yield 对应一个协程，相应的对应一个 Future 对象，譬如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">routine_main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> routine_simple()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>这里的 routine_simple() 和 sleep(1) 分别对应一个协程，同时有一个 Future 对应。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Future</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._done = <span class="literal">False</span></span><br><span class="line">        self._callbacks = []</span><br><span class="line">        self._result = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_set_done</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._done = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> cb <span class="keyword">in</span> self._callbacks:</span><br><span class="line">            cb(self)</span><br><span class="line">        self._callbacks = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">done</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._done</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_done_callback</span><span class="params">(self, fn)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._done:</span><br><span class="line">            fn(self)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._callbacks.append(fn)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_result</span><span class="params">(self, result)</span>:</span></span><br><span class="line">        self._result = result</span><br><span class="line">        self._set_done()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._result</span><br></pre></td></tr></table></figure><h2 id="IOLoop"><a href="#IOLoop" class="headerlink" title="IOLoop"></a>IOLoop</h2><p>这里的 IOLoop 去掉了 tornado 源代码中 IO 相关部分，只保留了基本需要的功能，如果命名为 CoroutineLoop 更贴切。</p><p>这里的 IOLoop 提供基本的回调功能。它是一个线程循环，在循环中完成两件事：</p><ol><li>检测有没有注册的回调并执行</li><li>检测有没有到期的定时器回调并执行</li></ol><p>程序中注册的回调事件，最终都会在此处执行。<br>可以认为，协程程序本身、协程的驱动程序 都会在此处执行。<br>协程本身使用 wrapper 包装，并最后注册到 IOLoop 的事件回调，所以它的从预激到结束的代码全部在 IOLoop 回调中执行。<br>而协程预激后，会把 Runner.run() 函数注册到 IOLoop 的事件回调，以驱动协程向前运行。</p><p>理解这一点对于理解协程的运行原理至关重要。</p><p>这就是单线程异步的基本原理。因为都在一个线程循环中执行，我们可以不用处理多线程需要面对的各种繁琐的事情。</p><h3 id="IOLoop-start"><a href="#IOLoop-start" class="headerlink" title="IOLoop.start"></a>IOLoop.start</h3><p>事件循环，回调事件和定时器事件在循环中调用。</p><h3 id="IOLoop-run-sync"><a href="#IOLoop-run-sync" class="headerlink" title="IOLoop.run_sync"></a>IOLoop.run_sync</h3><p>执行一个协程。</p><p>将 run 注册进全局回调，在 run 中调用 func() 启动协程。<br>注册协程结束回调 stop, 退出 run_sync 的 start 循环，事件循环随之结束。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOLoop</span><span class="params">(object)</span>:</span>，</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._callbacks = []</span><br><span class="line">        self._timers = []</span><br><span class="line">        self._running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">"_instance"</span>):</span><br><span class="line">            cls._instance = cls()</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_future</span><span class="params">(self, future, callback)</span>:</span></span><br><span class="line">        future.add_done_callback(</span><br><span class="line">            <span class="keyword">lambda</span> future: self.add_callback(functools.partial(callback, future)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_timeout</span><span class="params">(self, when, callback)</span>:</span></span><br><span class="line">        bisect.insort(self._timers, (when, callback))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call_later</span><span class="params">(self, delay, callback)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.add_timeout(time.time() + delay, callback)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_callback</span><span class="params">(self, call_back)</span>:</span></span><br><span class="line">        self._callbacks.append(call_back)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._running = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">while</span> self._running:</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 回调任务</span></span><br><span class="line">            callbacks = self._callbacks</span><br><span class="line">            self._callbacks = []</span><br><span class="line">            <span class="keyword">for</span> call_back <span class="keyword">in</span> callbacks:</span><br><span class="line">                call_back()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 定时器任务</span></span><br><span class="line">            <span class="keyword">while</span> self._timers <span class="keyword">and</span> self._timers[<span class="number">0</span>][<span class="number">0</span>] &lt; time.time():</span><br><span class="line">                task = self._timers[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">del</span> self._timers[<span class="number">0</span>]</span><br><span class="line">                task()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_sync</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        future_cell = [<span class="literal">None</span>]</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                future_cell[<span class="number">0</span>] = func()</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">            self.add_future(future_cell[<span class="number">0</span>], <span class="keyword">lambda</span> future: self.stop())</span><br><span class="line"></span><br><span class="line">        self.add_callback(run)</span><br><span class="line"></span><br><span class="line">        self.start()</span><br><span class="line">        <span class="keyword">return</span> future_cell[<span class="number">0</span>].result()</span><br></pre></td></tr></table></figure><h2 id="coroutine"><a href="#coroutine" class="headerlink" title="coroutine"></a>coroutine</h2><p>协程装饰器。<br>协程由 coroutine 装饰，分为两类：</p><ol><li>含 yield 的生成器函数</li><li>无 yield 语句的普通函数</li></ol><p>装饰协程，并通过注册回调驱动协程运行。<br>程序中通过 yield coroutine_func() 方式调用协程。<br>此时，wrapper 函数被调用：</p><ol><li>获取协程生成器</li><li>如果是生成器，则<ol><li>调用 next() 预激协程</li><li>实例化 Runner()，驱动协程</li></ol></li><li>如果是普通函数，则<ol><li>调用 set_result() 结束协程</li></ol></li></ol><p>协程返回 Future 对象，供外层的协程处理。外部通过操作该 Future 控制协程的运行。<br>每个 yield 对应一个协程，每个协程拥有一个 Future 对象。</p><p>外部协程获取到内部协程的 Future 对象，如果内部协程尚未结束，将 Runner.run() 方法注册到 内部协程的 Future 的结束回调。<br>这样，在内部协程结束时，会调用注册的 run() 方法，从而驱动外部协程向前执行。</p><p>各个协程通过 Future 形成一个链式回调关系。</p><p>Runner 类在下面单独小节描述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">coroutine</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> _make_coroutine_wrapper(func)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个协程都有一个 future， 代表当前协程的运行状态</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_make_coroutine_wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="meta">    @functools.wraps(func)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        future = Future()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result = func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span> (Return, StopIteration) <span class="keyword">as</span> e:</span><br><span class="line">            result = _value_from_stopiteration(e)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> future</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> isinstance(result, GeneratorType):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    yielded = next(result)</span><br><span class="line">                <span class="keyword">except</span> (StopIteration, Return) <span class="keyword">as</span> e:</span><br><span class="line">                    future.set_result(_value_from_stopiteration(e))</span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    Runner(result, future, yielded)</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="keyword">return</span> future</span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    future = <span class="literal">None</span></span><br><span class="line">        future.set_result(result)</span><br><span class="line">        <span class="keyword">return</span> future</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br></pre></td></tr></table></figure><h2 id="协程返回值"><a href="#协程返回值" class="headerlink" title="协程返回值"></a>协程返回值</h2><p>因为没有使用 yield from，协程无法直接返回值，所以使用抛出异常的方式返回。</p><p>python 2 无法在生成器中使用 return 语句。但是生成器中抛出的异常可以在外部 send() 语句中捕获。<br>所以，使用抛出异常的方式，将返回值存储在异常的 value 属性中，抛出。外部使用诸如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    yielded = gen.send(value)</span><br><span class="line"><span class="keyword">except</span> Return <span class="keyword">as</span> e:</span><br></pre></td></tr></table></figure><p>这样的方式获取协程的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Return</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, value=None)</span>:</span></span><br><span class="line">        super(Return, self).__init__()</span><br><span class="line">        self.value = value</span><br><span class="line">        self.args = (value,)</span><br></pre></td></tr></table></figure><h2 id="Runner"><a href="#Runner" class="headerlink" title="Runner"></a>Runner</h2><p>Runner 是协程的驱动器类。</p><p>self.result_future 保存当前协程的状态。<br>self.future 保存 yield 子协程传递回来的协程状态。<br>从子协程的 future 获取协程运行结果 send 给当前协程，以驱动协程向前执行。</p><p>注意，会判断子协程返回的 future<br>如果 future 已经 set_result，代表子协程运行结束，回到 while Ture 循环，继续往下执行下一个 send；<br>如果 future 未 set_result，代表子协程运行未结束，将 self.run 注册到子协程结束的回调，这样，子协程结束时会调用 self.run，重新驱动协程执行。</p><p>如果本协程 send() 执行过程中，捕获到 StopIteration 或者 Return 异常，说明本协程执行结束，设置 result_future 的协程返回值，此时，注册的回调函数被执行。这里的回调函数为本协程的父协程所注册的 run()。<br>相当于唤醒已经处于 yiled 状态的父协程，通过 IOLoop 回调 run 函数，再执行 send()。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, gen, result_future, first_yielded)</span>:</span></span><br><span class="line">        self.gen = gen</span><br><span class="line">        self.result_future = result_future</span><br><span class="line">        self.io_loop = IOLoop.instance()</span><br><span class="line">        self.running = <span class="literal">False</span></span><br><span class="line">        self.future = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> self.handle_yield(first_yielded):</span><br><span class="line">            self.run()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.running = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="comment"># 每一个 yield 处看做一个协程，对应一个 Future</span></span><br><span class="line">                    <span class="comment"># 将该协程的结果 send 出去</span></span><br><span class="line">                    <span class="comment"># 这样外层形如  ret = yiled coroutine_func() 能够获取到协程的返回数据</span></span><br><span class="line">                    value = self.future.result()</span><br><span class="line">                    yielded = self.gen.send(value)</span><br><span class="line">                <span class="keyword">except</span> (StopIteration, Return) <span class="keyword">as</span> e:</span><br><span class="line">                    <span class="comment"># 协程执行完成，不再注册回调</span></span><br><span class="line">                    self.result_future.set_result(_value_from_stopiteration(e))</span><br><span class="line">                    self.result_future = <span class="literal">None</span></span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                <span class="comment"># 协程未执行结束，继续使用 self.run() 进行驱动</span></span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> self.handle_yield(yielded):</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_yield</span><span class="params">(self, yielded)</span>:</span></span><br><span class="line">        self.future = yielded</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.future.done():</span><br><span class="line">            <span class="comment"># 给 future 增加执行结束回调函数，这样，外部使用 future.set_result 时会调用该回调</span></span><br><span class="line">            <span class="comment"># 而该回调是把 self.run() 注册到 IOLoop 的事件循环</span></span><br><span class="line">            <span class="comment"># 所以，future.set_result 会把 self.run() 注册到 IOLoop 的事件循环，从而在下一个事件循环中调用</span></span><br><span class="line">            self.io_loop.add_future(</span><br><span class="line">                self.future, <span class="keyword">lambda</span> f: self.run())</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>sleep 是一个延时协程，充分展示了协程的标准实现。</p><ul><li>创建一个 Future，并返回给外部协程；</li><li>外部协程发现是一个未完的状态，将 run() 注册到 Future 的完成回调，同时外部协程被挂起；</li><li>在设置的延时后，IOLoop 会回调 set_result 结束协程；</li><li>IOLoop 调用 run() 函数；</li><li>IOLoop 调用 send()，唤醒挂起的外部协程。</li></ul><p>流程如下图：</p><p><img src="https://github.com/TheBigFish/blog/raw/master/assets/tornado_simple_routine_1.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(duration)</span>:</span></span><br><span class="line">    f = Future()</span><br><span class="line">    IOLoop.instance().call_later(duration, <span class="keyword">lambda</span>: f.set_result(<span class="literal">None</span>))</span><br><span class="line">    <span class="keyword">return</span> f</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">routine_ur</span><span class="params">(url, wait)</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> sleep(wait)</span><br><span class="line">    print(<span class="string">'routine_ur &#123;&#125; took &#123;&#125;s to get!'</span>.format(url, wait))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">routine_url_with_return</span><span class="params">(url, wait)</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> sleep(wait)</span><br><span class="line">    print(<span class="string">'routine_url_with_return &#123;&#125; took &#123;&#125;s to get!'</span>.format(url, wait))</span><br><span class="line">    <span class="keyword">raise</span> Return((url, wait))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非生成器协程，不会为之生成单独的 Runner()</span></span><br><span class="line"><span class="comment"># coroutine 运行结束后，直接返回一个已经执行结束的 future</span></span><br><span class="line"><span class="meta">@coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">routine_simple</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"it is simple routine"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">routine_simple_return</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"it is simple routine with return"</span>)</span><br><span class="line">    <span class="keyword">raise</span> Return(<span class="string">"value from routine_simple_return"</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">routine_main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> routine_simple()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">yield</span> routine_ur(<span class="string">"url0"</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    ret = <span class="keyword">yield</span> routine_simple_return()</span><br><span class="line">    print(ret)</span><br><span class="line"></span><br><span class="line">    ret = <span class="keyword">yield</span> routine_url_with_return(<span class="string">"url1"</span>, <span class="number">1</span>)</span><br><span class="line">    print(ret)</span><br><span class="line"></span><br><span class="line">    ret = <span class="keyword">yield</span> routine_url_with_return(<span class="string">"url2"</span>, <span class="number">2</span>)</span><br><span class="line">    print(ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    IOLoop.instance().run_sync(routine_main)</span><br></pre></td></tr></table></figure><p>运行输出为：</p><pre><code>it is simple routineroutine_ur url0 took 1s to get!it is simple routine with returnvalue from routine_simple_returnroutine_url_with_return url1 took 1s to get!(&apos;url1&apos;, 1)routine_url_with_return url2 took 2s to get!(&apos;url2&apos;, 2)</code></pre><p>可以观察到协程 sleep 已经生效。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/TheBigFish/simple-python/blob/master/tornado/simple_coroutine.py" target="_blank" rel="noopener">simple_coroutine.py</a></p><h2 id="copyright"><a href="#copyright" class="headerlink" title="copyright"></a>copyright</h2><p>author：bigfish<br>copyright: <a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">许可协议 知识共享署名 - 非商业性使用 4.0 国际许可协议</a></p><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/12" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/12</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tornado-源码之-coroutine-分析&quot;&gt;&lt;a href=&quot;#tornado-源码之-coroutine-分析&quot; class=&quot;headerlink&quot; title=&quot;tornado 源码之 coroutine 分析&quot;&gt;&lt;/a&gt;tornado 源码之 co
      
    
    </summary>
    
    
    
      <category term="Tornado" scheme="http://yoursite.com/tags/Tornado/"/>
    
  </entry>
  
  <entry>
    <title>rust 安装及配置</title>
    <link href="http://yoursite.com/2019/01/03/rust--an-zhuang-ji-pei-zhi/"/>
    <id>http://yoursite.com/2019/01/03/rust--an-zhuang-ji-pei-zhi/</id>
    <published>2019-01-03T03:58:15.000Z</published>
    <updated>2019-01-03T03:58:15.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="rust-安装及配置"><a href="#rust-安装及配置" class="headerlink" title="rust 安装及配置"></a>rust 安装及配置</h1><h2 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line"></span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="built_in">export</span> CARGO_HOME=<span class="string">"~/.cargo/"</span></span><br><span class="line"><span class="built_in">export</span> RUSTBINPATH=<span class="string">"~/.cargo/bin"</span></span><br><span class="line"><span class="built_in">export</span> RUST=<span class="string">"~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"</span></span><br><span class="line"><span class="built_in">export</span> RUST_SRC_PATH=<span class="string">"<span class="variable">$RUST</span>/lib/rustlib/src/rust/src"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$RUSTBINPATH</span></span><br></pre></td></tr></table></figure><h2 id="修改源"><a href="#修改源" class="headerlink" title="修改源"></a>修改源</h2><h3 id="basrc"><a href="#basrc" class="headerlink" title=".basrc"></a>.basrc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.bashrc</span><br><span class="line"><span class="comment">#add</span></span><br><span class="line"><span class="built_in">export</span> RUSTUP_DIST_SERVER=https://mirrors.ustc.edu.cn/rust-static</span><br><span class="line"><span class="built_in">export</span> RUSTUP_UPDATE_ROOT=https://mirrors.ustc.edu.cn/rust-static/rustup</span><br></pre></td></tr></table></figure><h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi ~/.cargo/config</span><br><span class="line"><span class="comment">#add</span></span><br><span class="line">[source.crates-io]</span><br><span class="line">replace-with = <span class="string">'ustc'</span></span><br><span class="line"></span><br><span class="line">[source.ustc]</span><br><span class="line">registry = <span class="string">"git://mirrors.ustc.edu.cn/crates.io-index"</span></span><br></pre></td></tr></table></figure><h2 id="ch02-00-guessing-game-tutorial-md-编译错误"><a href="#ch02-00-guessing-game-tutorial-md-编译错误" class="headerlink" title="ch02-00-guessing-game-tutorial.md 编译错误"></a>ch02-00-guessing-game-tutorial.md 编译错误</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.rst 文件顶部增加</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> rand;</span><br></pre></td></tr></table></figure><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/11" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/11</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;rust-安装及配置&quot;&gt;&lt;a href=&quot;#rust-安装及配置&quot; class=&quot;headerlink&quot; title=&quot;rust 安装及配置&quot;&gt;&lt;/a&gt;rust 安装及配置&lt;/h1&gt;&lt;h2 id=&quot;配置参数&quot;&gt;&lt;a href=&quot;#配置参数&quot; class=&quot;head
      
    
    </summary>
    
    
    
      <category term="Rust" scheme="http://yoursite.com/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码之StackContext（二）</title>
    <link href="http://yoursite.com/2018/12/21/tornado-yuan-ma-zhi-stackcontext%EF%BC%88-er-%EF%BC%89/"/>
    <id>http://yoursite.com/2018/12/21/tornado-yuan-ma-zhi-stackcontext%EF%BC%88-er-%EF%BC%89/</id>
    <published>2018-12-21T08:51:30.000Z</published>
    <updated>2019-01-11T07:29:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tornado-源码之-StackContext（二）"><a href="#tornado-源码之-StackContext（二）" class="headerlink" title="tornado 源码之 StackContext（二）"></a>tornado 源码之 StackContext（二）</h1><blockquote><p>StackContext allows applications to maintain threadlocal-like state<br>that follows execution as it moves to other execution contexts.</p><p>an exception<br>handler is a kind of stack-local state and when that stack is suspended<br>and resumed in a new context that state needs to be preserved.</p><p>一个栈结构的上下文处理类<br>异常处理也是一个栈结构的上下文应用</p></blockquote><h2 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h2><ul><li><a href="#tornado-%E6%BA%90%E7%A0%81%E4%B9%8B-stackcontext%E4%BA%8C">tornado 源码之 StackContext（二）</a><ul><li><a href="#contents">contents</a></li><li><a href="#example-usage">example usage</a></li><li><a href="#head">head</a></li><li><a href="#state">_State</a></li><li><a href="#stackcontext">StackContext</a></li><li><a href="#exceptionstackcontext">ExceptionStackContext</a><ul><li><a href="#example">example</a></li></ul></li><li><a href="#nullcontext">NullContext</a></li><li><a href="#wrap">wrap</a></li><li><a href="#copyright">copyright</a></li></ul></li></ul><h2 id="example-usage"><a href="#example-usage" class="headerlink" title="example usage"></a>example usage</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">die_on_error</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        logging.error(<span class="string">"exception in asynchronous operation"</span>,exc_info=<span class="literal">True</span>)</span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> StackContext(die_on_error):</span><br><span class="line">    <span class="comment"># Any exception thrown here *or in callback and its desendents*</span></span><br><span class="line">    <span class="comment"># will cause the process to exit instead of spinning endlessly</span></span><br><span class="line">    <span class="comment"># in the ioloop.</span></span><br><span class="line">    http_client.fetch(url, callback)</span><br><span class="line">ioloop.start()</span><br></pre></td></tr></table></figure><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> threading</span><br></pre></td></tr></table></figure><h2 id="State"><a href="#State" class="headerlink" title="_State"></a>_State</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_State</span><span class="params">(threading.local)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.contexts = ()</span><br><span class="line">_state = _State()</span><br></pre></td></tr></table></figure><h2 id="StackContext"><a href="#StackContext" class="headerlink" title="StackContext"></a>StackContext</h2><ol><li>初始化时保持传入的上下文对象</li><li>__enter__<ol><li>保存当前的全局上下文</li><li>append 新的上下文到全局上下文</li><li>构造新的上下文</li><li>进入新的上下文 __enter__</li></ol></li><li>__exit__<ol><li>调用新的上下文 context __exit__</li><li>回复全局上下文</li></ol></li></ol><p>全局上下文保存整个执行程序的上下文（栈）<br>with StackContext(context) 使程序包裹在 (global_context, context) 上执行<br>执行完成后恢复全局上下文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, context_factory)</span>:</span></span><br><span class="line">        self.context_factory = context_factory</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.old_contexts = _state.contexts</span><br><span class="line">        _state.contexts = (self.old_contexts +</span><br><span class="line">                           ((StackContext, self.context_factory),))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.context = self.context_factory()</span><br><span class="line">            self.context.__enter__()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            _state.contexts = self.old_contexts</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.context.__exit__(type, value, traceback)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            _state.contexts = self.old_contexts</span><br></pre></td></tr></table></figure><h2 id="ExceptionStackContext"><a href="#ExceptionStackContext" class="headerlink" title="ExceptionStackContext"></a>ExceptionStackContext</h2><p>捕获上下文执行中抛出而又未被捕获的异常<br>作用类似 finally<br>用于执行在程序抛出异常后记录日志、关闭 socket 这些现场清理工作<br>如果 exception_handler 中返回 True, 表明异常已经被处理，不会再抛出</p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.stack_context</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line">ioloop = tornado.ioloop.IOLoop.instance()</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">context_without_catch</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"enter context"</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    print(<span class="string">"exit context"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exception_handler</span><span class="params">(type, value, traceback)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"catch uncaught exception:"</span>, type, value, traceback</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tornado.stack_context.ExceptionStackContext(exception_handler):</span><br><span class="line">        <span class="keyword">with</span> tornado.stack_context.StackContext(context_without_catch):</span><br><span class="line">            <span class="keyword">print</span> <span class="number">0</span> / <span class="number">0</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line"><span class="comment"># enter context</span></span><br><span class="line"><span class="comment"># catch uncaught exception: &lt;type 'exceptions.ZeroDivisionError'&gt; integer division or modulo by zero &lt;traceback object at 0x0000000003321FC8&gt;</span></span><br></pre></td></tr></table></figure><p>__exit__ 中捕获 with 语句所包裹的程序执行中所抛出的异常，调用注册的 exception_handler 进行处理<br>exception_handler 返回 True，则异常不会蔓延</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExceptionStackContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, exception_handler)</span>:</span></span><br><span class="line">        self.exception_handler = exception_handler</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.old_contexts = _state.contexts</span><br><span class="line">        _state.contexts = (self.old_contexts +</span><br><span class="line">                           ((ExceptionStackContext, self.exception_handler),))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> type <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> self.exception_handler(type, value, traceback)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            _state.contexts = self.old_contexts</span><br></pre></td></tr></table></figure><h2 id="NullContext"><a href="#NullContext" class="headerlink" title="NullContext"></a>NullContext</h2><p>临时构造一个空的全局上下文</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NullContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.old_contexts = _state.contexts</span><br><span class="line">        _state.contexts = ()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></span><br><span class="line">        _state.contexts = self.old_contexts</span><br></pre></td></tr></table></figure><h2 id="wrap"><a href="#wrap" class="headerlink" title="wrap"></a>wrap</h2><ol><li>比较当时的全局上下文（_state.contexts）和闭包中保存的上下文 (contexts)<ol><li>如果当前上下文长度长，表面执行环境需要重新构造</li><li>如果有两者有任何一个上下文不同，执行环境也要重新构造<ol><li>新建一个 NullContext(), 清除当前的_state.contexts(保存原来的，提出时复原)</li><li>以此为基础构造一个 contexts 上下文链</li></ol></li><li>如果 contexts 是 当前上下文的一个 prefix，则将当前上下文的后续部分作为上下文链，前面共有的无需再构造</li></ol></li><li>在新的上下文链（new_contexts）上执行 with 操作，保证 callback 的执行环境与当时保存时的一模一样</li></ol><p>之所以进行这样复杂的操作，是为了对某些前面执行环境相同的情况省略前面的构造，节省时间，否则，可以用一行代替：</p><p><code>new_contexts = ([NullContext()] + [cls(arg) for (cls,arg) in contexts])</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> fn <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(callback, contexts, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 函数实际调用时，上下文环境发生了变化，与`contexts = _state.contexts`已经有所不同</span></span><br><span class="line">        <span class="keyword">if</span> (len(_state.contexts) &gt; len(contexts) <span class="keyword">or</span></span><br><span class="line">            any(a[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> b[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">for</span> a, b <span class="keyword">in</span> itertools.izip(_state.contexts, contexts))):</span><br><span class="line">            <span class="comment"># contexts have been removed or changed, so start over</span></span><br><span class="line">            new_contexts = ([NullContext()] +</span><br><span class="line">                            [cls(arg) <span class="keyword">for</span> (cls,arg) <span class="keyword">in</span> contexts])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_contexts = [cls(arg)</span><br><span class="line">                            <span class="keyword">for</span> (cls, arg) <span class="keyword">in</span> contexts[len(_state.contexts):]]</span><br><span class="line">        <span class="keyword">if</span> len(new_contexts) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">with</span> contextlib.nested(*new_contexts):</span><br><span class="line">                callback(*args, **kwargs)</span><br><span class="line">        <span class="keyword">elif</span> new_contexts:</span><br><span class="line">            <span class="keyword">with</span> new_contexts[<span class="number">0</span>]:</span><br><span class="line">                callback(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            callback(*args, **kwargs)</span><br><span class="line">    <span class="keyword">if</span> getattr(fn, <span class="string">'stack_context_wrapped'</span>, <span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存上下文环境</span></span><br><span class="line">    contexts = _state.contexts</span><br><span class="line">    result = functools.partial(wrapped, fn, contexts)</span><br><span class="line">    result.stack_context_wrapped = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="copyright"><a href="#copyright" class="headerlink" title="copyright"></a>copyright</h2><p>author：bigfish<br>copyright: <a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">许可协议 知识共享署名 - 非商业性使用 4.0 国际许可协议</a></p><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/10" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/10</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tornado-源码之-StackContext（二）&quot;&gt;&lt;a href=&quot;#tornado-源码之-StackContext（二）&quot; class=&quot;headerlink&quot; title=&quot;tornado 源码之 StackContext（二）&quot;&gt;&lt;/a&gt;torna
      
    
    </summary>
    
    
    
      <category term="Tornado" scheme="http://yoursite.com/tags/Tornado/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码之StackContext（一）</title>
    <link href="http://yoursite.com/2018/12/21/-tornado-yuan-ma-zhi-stackcontext%EF%BC%88-yi-%EF%BC%89/"/>
    <id>http://yoursite.com/2018/12/21/-tornado-yuan-ma-zhi-stackcontext%EF%BC%88-yi-%EF%BC%89/</id>
    <published>2018-12-21T08:50:38.000Z</published>
    <updated>2019-01-11T07:29:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tornado-源码之-StackContext（一）"><a href="#tornado-源码之-StackContext（一）" class="headerlink" title="tornado 源码之 StackContext（一）"></a>tornado 源码之 StackContext（一）</h1><blockquote><p>tornado 的异步上下文机制分析</p></blockquote><h2 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h2><ul><li><a href="#tornado-%E6%BA%90%E7%A0%81%E4%B9%8B-stackcontext%E4%B8%80">tornado 源码之 StackContext（一）</a><ul><li><a href="#contents">contents</a></li><li><a href="#myioloop">MyIOLoop</a></li><li><a href="#%E5%BC%82%E6%AD%A5%E5%9B%9E%E8%B0%83%E5%BC%82%E5%B8%B8%E7%9A%84%E6%8D%95%E8%8E%B7">异步回调异常的捕获</a></li><li><a href="#%E4%BD%BF%E7%94%A8-wrap">使用 wrap</a></li><li><a href="#%E4%BD%BF%E7%94%A8-contextlib">使用 contextlib</a></li><li><a href="#inspired-by">inspired by</a></li><li><a href="#copyright">copyright</a></li></ul></li></ul><p>我们实现一个简单的 MyIOLoop 类，模仿 tornado 的 IOLoop，实现异步回调<br>实现一个简单的 MyStackContext 类，模仿 tornado 的 StackContext，实现上下文</p><h2 id="MyIOLoop"><a href="#MyIOLoop" class="headerlink" title="MyIOLoop"></a>MyIOLoop</h2><p>模拟 tornado IOLoop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIOLoop</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._callbacks = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">"_instance"</span>):</span><br><span class="line">            cls._instance = cls()</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_callback</span><span class="params">(self, call_back)</span>:</span></span><br><span class="line">        self._callbacks.append(call_back)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        callbacks = self._callbacks</span><br><span class="line">        self._callbacks = []</span><br><span class="line">        <span class="keyword">for</span> call_back <span class="keyword">in</span> callbacks:</span><br><span class="line">            call_back()</span><br></pre></td></tr></table></figure><h2 id="异步回调异常的捕获"><a href="#异步回调异常的捕获" class="headerlink" title="异步回调异常的捕获"></a>异步回调异常的捕获</h2><p>由输出可以看到，回调函数 call_func 中抛出的异常，在 main 函数中无法被捕获<br>main 函数只能捕获当时运行的 async_task 中抛出的异常, async_task 只是向 MyIOLoop 注册了一个回调，并没有当场调用回调<br>call_func 函数最终在 MyIOLoop.start 中调用，其异常没有被捕获</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">my_io_loop = MyIOLoop.instance()</span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run call_func'</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'except in call_func'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times</span><br><span class="line">    times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run async task &#123;&#125;'</span>.format(times)</span><br><span class="line">    my_io_loop.add_callback(call_back=call_func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        async_task()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'main exception &#123;&#125;'</span>.format(e)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'end'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    my_io_loop.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># run async task 1</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment"># run call_func</span></span><br><span class="line"><span class="comment">#   File "E:/learn/python/simple-python/stack_context_example.py", line 56, in &lt;module&gt;</span></span><br><span class="line"><span class="comment">#     my_io_loop.start()</span></span><br><span class="line"><span class="comment">#   File "E:/learn/python/simple-python/stack_context_example.py", line 26, in start</span></span><br><span class="line"><span class="comment">#     call_back()</span></span><br><span class="line"><span class="comment">#   File "E:/learn/python/simple-python/stack_context_example.py", line 36, in call_func</span></span><br><span class="line"><span class="comment">#     raise ValueError('except in call_func')</span></span><br><span class="line"><span class="comment"># ValueError: except in call_func</span></span><br></pre></td></tr></table></figure><h2 id="使用-wrap"><a href="#使用-wrap" class="headerlink" title="使用 wrap"></a>使用 wrap</h2><p>可以使用 wrap 的方式，把函数调用和异常捕捉写在一起，回调实际调用的是带异常捕捉的函数 wrapper</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">my_io_loop = MyIOLoop.instance()</span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run call_func'</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'except in call_func'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'wrapper exception &#123;&#125;'</span>.format(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times</span><br><span class="line">    times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run async task &#123;&#125;'</span>.format(times)</span><br><span class="line">    my_io_loop.add_callback(call_back=functools.partial(wrapper, call_func))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        async_task()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'main exception &#123;&#125;'</span>.format(e)</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'end'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    my_io_loop.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># run async task 1</span></span><br><span class="line"><span class="comment"># run call_func</span></span><br><span class="line"><span class="comment"># wrapper exception except in call_func</span></span><br></pre></td></tr></table></figure><p>由此，可以想到，构造一个上下文环境，使用全局变量保存这个执行环境，等回调函数执行的时候，构造出这个环境</p><h2 id="使用-contextlib"><a href="#使用-contextlib" class="headerlink" title="使用 contextlib"></a>使用 contextlib</h2><p>下面模仿了 tornado 异步上下文实现机制</p><ol><li>MyStackContext 使用 __enter__ __exit__ 支持上下文</li><li>MyStackContext 构造函数参数为一个上下文对象</li><li>with MyStackContext(context) 进行如下动作：<br><strong>在 MyStackContext(context) 构造时，把 context 注册进全局工厂 MyStackContext.context_factory</strong><ol><li>进入 MyStackContext 的__enter</li><li>构造一个 context 对象</li><li>调用 context 对象的 __enter，进入真正 context 上下文</li><li>执行 context 上下文，my_context yield 语句前的部分</li><li>执行上下文包裹的语句，async_task</li><li>async_task 中 add_callback，实际保存的 wrap, wrap 将此时的全局上下文环境 MyStackContext.context_factory 保存，以方便 call_back 调用</li><li>调用 context 对象的 __exit, 退出 context 上下文</li><li>进入 MyStackContext 的__exit</li></ol></li><li>my_io_loop.start() 执行, 调用注册的 _call_back</li><li>实际调用 wrapped 函数<ol><li>获取保存的 context 环境</li><li>with context</li><li>调用真正的 callback</li></ol></li></ol><p>这样，在 main 函数中执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> MyStackContext(my_context):</span><br><span class="line">    async_task()</span><br></pre></td></tr></table></figure><p>构造一个执行上下文 my_context，异步函数将在这个上下文中调用<br>效果上相当于在 my_context 这个上下文环境中调用 async_task<br>类似：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_context</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'---enter my_context---&gt;&gt;'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        async_task()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'handler except: &#123;&#125;'</span>.format(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&lt;&lt;---exit my_context ---'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIOLoop</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._callbacks = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">instance</span><span class="params">(cls)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(cls, <span class="string">"_instance"</span>):</span><br><span class="line">            cls._instance = cls()</span><br><span class="line">        <span class="keyword">return</span> cls._instance</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_callback</span><span class="params">(self, call_back)</span>:</span></span><br><span class="line">        self._callbacks.append(wrap(call_back))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">        callbacks = self._callbacks</span><br><span class="line">        self._callbacks = []</span><br><span class="line">        <span class="keyword">for</span> call_back <span class="keyword">in</span> callbacks:</span><br><span class="line">            self._call_back(call_back)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_call_back</span><span class="params">(func)</span>:</span></span><br><span class="line">        func()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStackContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    context_factory = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, context)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> context:</span><br><span class="line">            MyStackContext.context_factory.append(context)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.context = self.context_factory[<span class="number">0</span>]()</span><br><span class="line">            self.context.__enter__()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.context.__exit__(type, value, traceback)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(fn)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(callback, contexts, *args, **kwargs)</span>:</span></span><br><span class="line">        context = contexts[<span class="number">0</span>]()</span><br><span class="line">        <span class="keyword">with</span> context:</span><br><span class="line">            callback(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    contexts = MyStackContext.context_factory</span><br><span class="line">    result = functools.partial(wrapped, fn, contexts)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">my_io_loop = MyIOLoop.instance()</span><br><span class="line"></span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run call_func'</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'except in call_func'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times</span><br><span class="line">    times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run async task &#123;&#125;'</span>.format(times)</span><br><span class="line">    my_io_loop.add_callback(call_back=call_func)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_context</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'---enter my_context---&gt;&gt;'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'handler except: &#123;&#125;'</span>.format(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'&lt;&lt;---exit my_context ---'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> MyStackContext(my_context):</span><br><span class="line">        async_task()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'end main'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line">    my_io_loop.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ---enter my_context---&gt;&gt;</span></span><br><span class="line"><span class="comment"># run async task 1</span></span><br><span class="line"><span class="comment"># &lt;&lt;---exit my_context ---</span></span><br><span class="line"><span class="comment"># end main</span></span><br><span class="line"><span class="comment"># ---enter my_context---&gt;&gt;</span></span><br><span class="line"><span class="comment"># run call_func</span></span><br><span class="line"><span class="comment"># handler except: except in call_func</span></span><br><span class="line"><span class="comment"># &lt;&lt;---exit my_context ---</span></span><br></pre></td></tr></table></figure><h2 id="inspired-by"><a href="#inspired-by" class="headerlink" title="inspired by"></a>inspired by</h2><p><a href="https://www.jianshu.com/p/3e58f977b908" target="_blank" rel="noopener">Tornado 源码分析（二）异步上下文管理（StackContext）</a></p><h2 id="copyright"><a href="#copyright" class="headerlink" title="copyright"></a>copyright</h2><p>author：bigfish<br>copyright: <a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">许可协议 知识共享署名 - 非商业性使用 4.0 国际许可协议</a></p><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/9" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/9</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tornado-源码之-StackContext（一）&quot;&gt;&lt;a href=&quot;#tornado-源码之-StackContext（一）&quot; class=&quot;headerlink&quot; title=&quot;tornado 源码之 StackContext（一）&quot;&gt;&lt;/a&gt;torna
      
    
    </summary>
    
    
    
      <category term="Tornado" scheme="http://yoursite.com/tags/Tornado/"/>
    
  </entry>
  
  <entry>
    <title>tornado源码之iostream</title>
    <link href="http://yoursite.com/2018/12/20/tornado-yuan-ma-zhi-iostream/"/>
    <id>http://yoursite.com/2018/12/20/tornado-yuan-ma-zhi-iostream/</id>
    <published>2018-12-20T08:46:51.000Z</published>
    <updated>2018-12-20T08:46:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iostream-py"><a href="#iostream-py" class="headerlink" title="iostream.py"></a>iostream.py</h1><p>A utility class to write to and read from a non-blocking socket.</p><p>IOStream 对 socket 进行包装，采用注册回调方式实现非阻塞。<br>通过接口注册各个事件回调</p><ul><li>_read_callback</li><li>_write_callback</li><li>_close_callback</li><li>_connect_callback</li></ul><p>ioloop 中 socket 事件发生后，调用 IOStream._handle_events 方法，对事件进行分发。<br>对应的事件处理过程中，如果满足注册的回调条件，则调用回调函数<br>回调函数在 IOStream._handle_events 中被调用</p><h2 id="contents"><a href="#contents" class="headerlink" title="contents"></a>contents</h2><ul><li><a href="#iostreampy">iostream.py</a><ul><li><a href="#contents">contents</a></li><li><a href="#example">example</a></li><li><a href="#head">head</a></li><li><a href="#iostreaminit">IOStream.__init__</a></li><li><a href="#iostreamconnect">IOStream.connect</a></li><li><a href="#iostreamreaduntil">IOStream.read_until</a></li><li><a href="#iostreamreadbytes">IOStream.read_bytes</a></li><li><a href="#iostreamwrite">IOStream.write</a></li><li><a href="#iostreamclose">IOStream.close</a></li><li><a href="#iostreamhandleevents">IOStream._handle_events</a></li><li><a href="#iostreamruncallback">IOStream._run_callback</a></li><li><a href="#iostreamruncallback-1">IOStream._run_callback</a></li><li><a href="#iostreamreadfromsocket">IOStream._read_from_socket</a></li><li><a href="#iostreamreadtobuffer">IOStream._read_to_buffer</a></li><li><a href="#iostreamreadfrombuffer">IOStream._read_from_buffer</a></li><li><a href="#iostreamhandleconnect">IOStream._handle_connect</a></li><li><a href="#iostreamhandlewrite">IOStream._handle_write</a></li><li><a href="#iostreamconsume">IOStream._consume</a></li><li><a href="#iostreamaddiostate">IOStream._add_io_state</a></li><li><a href="#iostreamreadbuffersize">IOStream._read_buffer_size</a></li><li><a href="#copyright">copyright</a></li></ul></li></ul><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>一个简单的 IOStream 客户端示例<br><strong>由此可见， IOStream 是一个异步回调链</strong></p><ol><li>创建 socket</li><li>创建 IOStream 对象</li><li>连接到主机，传入连接成功后回调函数 send_request</li><li>socket 输出数据请求页面，读取 head, 传入读取 head 成功后回调函数 on_headers</li><li>继续读取 body, 传入读取 body 成功后回调函数 on_body</li><li>关闭 stream，关闭 ioloop</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> ioloop</span><br><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> iostream</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_request</span><span class="params">()</span>:</span></span><br><span class="line">    stream.write(<span class="string">"GET / HTTP/1.0\r\nHost: baidu.com\r\n\r\n"</span>)</span><br><span class="line">    stream.read_until(<span class="string">"\r\n\r\n"</span>, on_headers)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_headers</span><span class="params">(data)</span>:</span></span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> data.split(<span class="string">"\r\n"</span>):</span><br><span class="line">        parts = line.split(<span class="string">":"</span>)</span><br><span class="line">        <span class="keyword">if</span> len(parts) == <span class="number">2</span>:</span><br><span class="line">            headers[parts[<span class="number">0</span>].strip()] = parts[<span class="number">1</span>].strip()</span><br><span class="line">    stream.read_bytes(int(headers[<span class="string">"Content-Length"</span>]), on_body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">on_body</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">print</span> data</span><br><span class="line">    stream.close()</span><br><span class="line">    ioloop.IOLoop.instance().stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, <span class="number">0</span>)</span><br><span class="line">stream = iostream.IOStream(s)</span><br><span class="line">stream.connect((<span class="string">"baidu.com"</span>, <span class="number">80</span>), send_request)</span><br><span class="line">ioloop.IOLoop.instance().start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># html&gt;</span></span><br><span class="line"><span class="comment"># &lt;meta http-equiv="refresh" content="0;        url=http://www.baidu.com/"&gt;</span></span><br><span class="line"><span class="comment"># &lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> with_statement</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> errno</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> ioloop</span><br><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> stack_context</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> ssl <span class="comment"># Python 2.6+</span></span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    ssl = <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="IOStream-init"><a href="#IOStream-init" class="headerlink" title="IOStream.__init__"></a>IOStream.__init__</h2><p>包装 socket 类<br>关键语句 <code>self.io_loop.add_handler(self.socket.fileno(), self._handle_events, self._state)</code> 将自身的_handle_events 加入到全局 ioloop poll 事件回调<br>此时只注册了 ERROR 类型事件</p><p>_read_buffer: 读缓冲</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOStream</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, socket, io_loop=None, max_buffer_size=<span class="number">104857600</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 read_chunk_size=<span class="number">4096</span>)</span>:</span></span><br><span class="line">        self.socket = socket</span><br><span class="line">        self.socket.setblocking(<span class="literal">False</span>)</span><br><span class="line">        self.io_loop = io_loop <span class="keyword">or</span> ioloop.IOLoop.instance()</span><br><span class="line">        self.max_buffer_size = max_buffer_size</span><br><span class="line">        self.read_chunk_size = read_chunk_size</span><br><span class="line">        self._read_buffer = collections.deque()</span><br><span class="line">        self._write_buffer = collections.deque()</span><br><span class="line">        self._write_buffer_frozen = <span class="literal">False</span></span><br><span class="line">        self._read_delimiter = <span class="literal">None</span></span><br><span class="line">        self._read_bytes = <span class="literal">None</span></span><br><span class="line">        self._read_callback = <span class="literal">None</span></span><br><span class="line">        self._write_callback = <span class="literal">None</span></span><br><span class="line">        self._close_callback = <span class="literal">None</span></span><br><span class="line">        self._connect_callback = <span class="literal">None</span></span><br><span class="line">        self._connecting = <span class="literal">False</span></span><br><span class="line">        self._state = self.io_loop.ERROR</span><br><span class="line">        <span class="keyword">with</span> stack_context.NullContext():</span><br><span class="line">            self.io_loop.add_handler(</span><br><span class="line">                self.socket.fileno(), self._handle_events, self._state)</span><br></pre></td></tr></table></figure><h2 id="IOStream-connect"><a href="#IOStream-connect" class="headerlink" title="IOStream.connect"></a>IOStream.connect</h2><p>连接 socket 到远程地址，非阻塞模式</p><ol><li>连接 socket</li><li>注册连接完成回调</li><li>poll 增加 socket 写事件</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">connect</span><span class="params">(self, address, callback=None)</span>:</span></span><br><span class="line">    <span class="string">"""Connects the socket to a remote address without blocking.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    May only be called if the socket passed to the constructor was</span></span><br><span class="line"><span class="string">    not previously connected.  The address parameter is in the</span></span><br><span class="line"><span class="string">    same format as for socket.connect, i.e. a (host, port) tuple.</span></span><br><span class="line"><span class="string">    If callback is specified, it will be called when the</span></span><br><span class="line"><span class="string">    connection is completed.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Note that it is safe to call IOStream.write while the</span></span><br><span class="line"><span class="string">    connection is pending, in which case the data will be written</span></span><br><span class="line"><span class="string">    as soon as the connection is ready.  Calling IOStream read</span></span><br><span class="line"><span class="string">    methods before the socket is connected works on some platforms</span></span><br><span class="line"><span class="string">    but is non-portable.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self._connecting = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        self.socket.connect(address)</span><br><span class="line">    <span class="keyword">except</span> socket.error, e:</span><br><span class="line">        <span class="comment"># In non-blocking mode connect() always raises an exception</span></span><br><span class="line">        <span class="keyword">if</span> e.args[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> (errno.EINPROGRESS, errno.EWOULDBLOCK):</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">    self._connect_callback = stack_context.wrap(callback)</span><br><span class="line">    self._add_io_state(self.io_loop.WRITE)</span><br></pre></td></tr></table></figure><h2 id="IOStream-read-until"><a href="#IOStream-read-until" class="headerlink" title="IOStream.read_until"></a>IOStream.read_until</h2><ol><li>注册读完成回调</li><li>尝试从缓冲中读</li><li>从 socket 中读到缓冲区</li><li>重复 2,3, 没有数据则退出</li><li>将 socket 读事件加入 poll</li></ol><p>如果缓存中数据满足条件，则直接执行 callback 并返回，<br>否则，保存 callback 函数下次 read 事件发生时，_handle_events 处理读事件时，再进行检测及调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_until</span><span class="params">(self, delimiter, callback)</span>:</span></span><br><span class="line">    <span class="string">"""Call callback when we read the given delimiter."""</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> self._read_callback, <span class="string">"Already reading"</span></span><br><span class="line">    self._read_delimiter = delimiter</span><br><span class="line">    self._read_callback = stack_context.wrap(callback)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># See if we've already got the data from a previous read</span></span><br><span class="line">        <span class="keyword">if</span> self._read_from_buffer():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self._check_closed()</span><br><span class="line">        <span class="keyword">if</span> self._read_to_buffer() == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    self._add_io_state(self.io_loop.READ)</span><br></pre></td></tr></table></figure><h2 id="IOStream-read-bytes"><a href="#IOStream-read-bytes" class="headerlink" title="IOStream.read_bytes"></a>IOStream.read_bytes</h2><p>参考 read_until，读限定字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_bytes</span><span class="params">(self, num_bytes, callback)</span>:</span></span><br><span class="line">    <span class="string">"""Call callback when we read the given number of bytes."""</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="keyword">not</span> self._read_callback, <span class="string">"Already reading"</span></span><br><span class="line">    <span class="keyword">if</span> num_bytes == <span class="number">0</span>:</span><br><span class="line">        callback(<span class="string">""</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self._read_bytes = num_bytes</span><br><span class="line">    self._read_callback = stack_context.wrap(callback)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> self._read_from_buffer():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self._check_closed()</span><br><span class="line">        <span class="keyword">if</span> self._read_to_buffer() == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    self._add_io_state(self.io_loop.READ)</span><br></pre></td></tr></table></figure><h2 id="IOStream-write"><a href="#IOStream-write" class="headerlink" title="IOStream.write"></a>IOStream.write</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self, data, callback=None)</span>:</span></span><br><span class="line">    <span class="string">"""Write the given data to this stream.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If callback is given, we call it when all of the buffered write</span></span><br><span class="line"><span class="string">    data has been successfully written to the stream. If there was</span></span><br><span class="line"><span class="string">    previously buffered write data and an old write callback, that</span></span><br><span class="line"><span class="string">    callback is simply overwritten with this new callback.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    self._check_closed()</span><br><span class="line">    self._write_buffer.append(data)</span><br><span class="line">    self._add_io_state(self.io_loop.WRITE)</span><br><span class="line">    self._write_callback = stack_context.wrap(callback)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_close_callback</span><span class="params">(self, callback)</span>:</span></span><br><span class="line">    <span class="string">"""Call the given callback when the stream is closed."""</span></span><br><span class="line">    self._close_callback = stack_context.wrap(callback)</span><br></pre></td></tr></table></figure><h2 id="IOStream-close"><a href="#IOStream-close" class="headerlink" title="IOStream.close"></a>IOStream.close</h2><ol><li>从 ioloop 移除 socket 事件</li><li>关闭 socket</li><li>调用关闭回调</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Close this stream."""</span></span><br><span class="line">    <span class="keyword">if</span> self.socket <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        self.io_loop.remove_handler(self.socket.fileno())</span><br><span class="line">        self.socket.close()</span><br><span class="line">        self.socket = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">if</span> self._close_callback:</span><br><span class="line">            self._run_callback(self._close_callback)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reading</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Returns true if we are currently reading from the stream."""</span></span><br><span class="line">    <span class="keyword">return</span> self._read_callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writing</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Returns true if we are currently writing to the stream."""</span></span><br><span class="line">    <span class="keyword">return</span> bool(self._write_buffer)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">closed</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.socket <span class="keyword">is</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h2 id="IOStream-handle-events"><a href="#IOStream-handle-events" class="headerlink" title="IOStream._handle_events"></a>IOStream._handle_events</h2><p>核心回调<br>任何类型的 socket 事件触发 ioloop 回调_handle_events，然后在_handle_events 再进行分发<br>值得注意的是，IOStream 不处理连接请求的 read 事件<br><strong>注意</strong><br>作为服务端，默认代理的是已经建立连接的 socket</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># HTTPServer.\_handle_events</span></span><br><span class="line"><span class="comment"># connection 为已经accept的连接</span></span><br><span class="line">stream = iostream.IOStream(connection, io_loop=self.io_loop)</span><br></pre></td></tr></table></figure><p>作为客户端，需要手动调用 IOStream.connect，连接成功后，成功回调在 write 事件中处理</p><p>这个实现比较别扭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_events</span><span class="params">(self, fd, events)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.socket:</span><br><span class="line">        logging.warning(<span class="string">"Got events for closed stream %d"</span>, fd)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 处理读事件，调用已注册回调</span></span><br><span class="line">        <span class="keyword">if</span> events &amp; self.io_loop.READ:</span><br><span class="line">            self._handle_read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.socket:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 处理写事件，如果是刚建立连接，调用连接建立回调</span></span><br><span class="line">        <span class="keyword">if</span> events &amp; self.io_loop.WRITE:</span><br><span class="line">            <span class="keyword">if</span> self._connecting:</span><br><span class="line">                self._handle_connect()</span><br><span class="line">            self._handle_write()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.socket:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 错误事件，关闭 socket</span></span><br><span class="line">        <span class="keyword">if</span> events &amp; self.io_loop.ERROR:</span><br><span class="line">            self.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        state = self.io_loop.ERROR</span><br><span class="line">        <span class="keyword">if</span> self.reading():</span><br><span class="line">            state |= self.io_loop.READ</span><br><span class="line">        <span class="keyword">if</span> self.writing():</span><br><span class="line">            state |= self.io_loop.WRITE</span><br><span class="line">        <span class="keyword">if</span> state != self._state:</span><br><span class="line">            self._state = state</span><br><span class="line">            self.io_loop.update_handler(self.socket.fileno(), self._state)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        logging.error(<span class="string">"Uncaught exception, closing connection."</span>,</span><br><span class="line">                      exc_info=<span class="literal">True</span>)</span><br><span class="line">        self.close()</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><h2 id="IOStream-run-callback"><a href="#IOStream-run-callback" class="headerlink" title="IOStream._run_callback"></a>IOStream._run_callback</h2><p>执行回调</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_callback</span><span class="params">(self, callback, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Use a NullContext to ensure that all StackContexts are run</span></span><br><span class="line">        <span class="comment"># inside our blanket exception handler rather than outside.</span></span><br><span class="line">        <span class="keyword">with</span> stack_context.NullContext():</span><br><span class="line">            callback(*args, **kwargs)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        logging.error(<span class="string">"Uncaught exception, closing connection."</span>,</span><br><span class="line">                      exc_info=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># Close the socket on an uncaught exception from a user callback</span></span><br><span class="line">        <span class="comment"># (It would eventually get closed when the socket object is</span></span><br><span class="line">        <span class="comment"># gc'd, but we don't want to rely on gc happening before we</span></span><br><span class="line">        <span class="comment"># run out of file descriptors)</span></span><br><span class="line">        self.close()</span><br><span class="line">        <span class="comment"># Re-raise the exception so that IOLoop.handle_callback_exception</span></span><br><span class="line">        <span class="comment"># can see it and log the error</span></span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><h2 id="IOStream-run-callback-1"><a href="#IOStream-run-callback-1" class="headerlink" title="IOStream._run_callback"></a>IOStream._run_callback</h2><p>读回调</p><ol><li>从 socket 读取数据到缓存</li><li>无数据, socket 关闭</li><li>检测是否满足 read_until read_bytes</li><li>满足则执行对应回调</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_read</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Read from the socket until we get EWOULDBLOCK or equivalent.</span></span><br><span class="line">            <span class="comment"># SSL sockets do some internal buffering, and if the data is</span></span><br><span class="line">            <span class="comment"># sitting in the SSL object's buffer select() and friends</span></span><br><span class="line">            <span class="comment"># can't see it; the only way to find out if it's there is to</span></span><br><span class="line">            <span class="comment"># try to read it.</span></span><br><span class="line">            result = self._read_to_buffer()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            self.close()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> result == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> self._read_from_buffer():</span><br><span class="line">                <span class="keyword">return</span></span><br></pre></td></tr></table></figure><h2 id="IOStream-read-from-socket"><a href="#IOStream-read-from-socket" class="headerlink" title="IOStream._read_from_socket"></a>IOStream._read_from_socket</h2><p>从 socket 读取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read_from_socket</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Attempts to read from the socket.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns the data read or None if there is nothing to read.</span></span><br><span class="line"><span class="string">    May be overridden in subclasses.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chunk = self.socket.recv(self.read_chunk_size)</span><br><span class="line">    <span class="keyword">except</span> socket.error, e:</span><br><span class="line">        <span class="keyword">if</span> e.args[<span class="number">0</span>] <span class="keyword">in</span> (errno.EWOULDBLOCK, errno.EAGAIN):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">        self.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> chunk</span><br></pre></td></tr></table></figure><h2 id="IOStream-read-to-buffer"><a href="#IOStream-read-to-buffer" class="headerlink" title="IOStream._read_to_buffer"></a>IOStream._read_to_buffer</h2><p>从 socket 读取数据存入缓存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read_to_buffer</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Reads from the socket and appends the result to the read buffer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns the number of bytes read.  Returns 0 if there is nothing</span></span><br><span class="line"><span class="string">    to read (i.e. the read returns EWOULDBLOCK or equivalent).  On</span></span><br><span class="line"><span class="string">    error closes the socket and raises an exception.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        chunk = self._read_from_socket()</span><br><span class="line">    <span class="keyword">except</span> socket.error, e:</span><br><span class="line">        <span class="comment"># ssl.SSLError is a subclass of socket.error</span></span><br><span class="line">        logging.warning(<span class="string">"Read error on %d: %s"</span>,</span><br><span class="line">                        self.socket.fileno(), e)</span><br><span class="line">        self.close()</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">if</span> chunk <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    self._read_buffer.append(chunk)</span><br><span class="line">    <span class="keyword">if</span> self._read_buffer_size() &gt;= self.max_buffer_size:</span><br><span class="line">        logging.error(<span class="string">"Reached maximum read buffer size"</span>)</span><br><span class="line">        self.close()</span><br><span class="line">        <span class="keyword">raise</span> IOError(<span class="string">"Reached maximum read buffer size"</span>)</span><br><span class="line">    <span class="keyword">return</span> len(chunk)</span><br></pre></td></tr></table></figure><h2 id="IOStream-read-from-buffer"><a href="#IOStream-read-from-buffer" class="headerlink" title="IOStream._read_from_buffer"></a>IOStream._read_from_buffer</h2><p>从缓冲中过滤数据<br>检测是否满足结束条件 (read_until/read_bytes)，满足则调用之前注册的回调<br>采用的是查询方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_read_from_buffer</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""Attempts to complete the currently-pending read from the buffer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns True if the read was completed.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> self._read_bytes:</span><br><span class="line">        <span class="keyword">if</span> self._read_buffer_size() &gt;= self._read_bytes:</span><br><span class="line">            num_bytes = self._read_bytes</span><br><span class="line">            callback = self._read_callback</span><br><span class="line">            self._read_callback = <span class="literal">None</span></span><br><span class="line">            self._read_bytes = <span class="literal">None</span></span><br><span class="line">            self._run_callback(callback, self._consume(num_bytes))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> self._read_delimiter:</span><br><span class="line">        _merge_prefix(self._read_buffer, sys.maxint)</span><br><span class="line">        loc = self._read_buffer[<span class="number">0</span>].find(self._read_delimiter)</span><br><span class="line">        <span class="keyword">if</span> loc != <span class="number">-1</span>:</span><br><span class="line">            callback = self._read_callback</span><br><span class="line">            delimiter_len = len(self._read_delimiter)</span><br><span class="line">            self._read_callback = <span class="literal">None</span></span><br><span class="line">            self._read_delimiter = <span class="literal">None</span></span><br><span class="line">            self._run_callback(callback,</span><br><span class="line">                               self._consume(loc + delimiter_len))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="IOStream-handle-connect"><a href="#IOStream-handle-connect" class="headerlink" title="IOStream._handle_connect"></a>IOStream._handle_connect</h2><p>调用连接建立回调，并清除连接中标志</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_connect</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._connect_callback <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        callback = self._connect_callback</span><br><span class="line">        self._connect_callback = <span class="literal">None</span></span><br><span class="line">        self._run_callback(callback)</span><br><span class="line">    self._connecting = <span class="literal">False</span></span><br></pre></td></tr></table></figure><h2 id="IOStream-handle-write"><a href="#IOStream-handle-write" class="headerlink" title="IOStream._handle_write"></a>IOStream._handle_write</h2><p>写事件</p><ol><li>从缓冲区获取限定范围内数据</li><li>调用 socket.send 输出数据</li><li>如果数据发送我且已注册回调，调用发送完成回调</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_handle_write</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> self._write_buffer:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self._write_buffer_frozen:</span><br><span class="line">                <span class="comment"># On windows, socket.send blows up if given a</span></span><br><span class="line">                <span class="comment"># write buffer that's too large, instead of just</span></span><br><span class="line">                <span class="comment"># returning the number of bytes it was able to</span></span><br><span class="line">                <span class="comment"># process.  Therefore we must not call socket.send</span></span><br><span class="line">                <span class="comment"># with more than 128KB at a time.</span></span><br><span class="line">                _merge_prefix(self._write_buffer, <span class="number">128</span> * <span class="number">1024</span>)</span><br><span class="line">            num_bytes = self.socket.send(self._write_buffer[<span class="number">0</span>])</span><br><span class="line">            self._write_buffer_frozen = <span class="literal">False</span></span><br><span class="line">            _merge_prefix(self._write_buffer, num_bytes)</span><br><span class="line">            self._write_buffer.popleft()</span><br><span class="line">        <span class="keyword">except</span> socket.error, e:</span><br><span class="line">            <span class="keyword">if</span> e.args[<span class="number">0</span>] <span class="keyword">in</span> (errno.EWOULDBLOCK, errno.EAGAIN):</span><br><span class="line">                <span class="comment"># With OpenSSL, after send returns EWOULDBLOCK,</span></span><br><span class="line">                <span class="comment"># the very same string object must be used on the</span></span><br><span class="line">                <span class="comment"># next call to send.  Therefore we suppress</span></span><br><span class="line">                <span class="comment"># merging the write buffer after an EWOULDBLOCK.</span></span><br><span class="line">                <span class="comment"># A cleaner solution would be to set</span></span><br><span class="line">                <span class="comment"># SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER, but this is</span></span><br><span class="line">                <span class="comment"># not yet accessible from python</span></span><br><span class="line">                <span class="comment"># (http://bugs.python.org/issue8240)</span></span><br><span class="line">                self._write_buffer_frozen = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                logging.warning(<span class="string">"Write error on %d: %s"</span>,</span><br><span class="line">                                self.socket.fileno(), e)</span><br><span class="line">                self.close()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._write_buffer <span class="keyword">and</span> self._write_callback:</span><br><span class="line">        callback = self._write_callback</span><br><span class="line">        self._write_callback = <span class="literal">None</span></span><br><span class="line">        self._run_callback(callback)</span><br></pre></td></tr></table></figure><h2 id="IOStream-consume"><a href="#IOStream-consume" class="headerlink" title="IOStream._consume"></a>IOStream._consume</h2><p>从读缓存消费 loc 长度的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_consume</span><span class="params">(self, loc)</span>:</span></span><br><span class="line">    _merge_prefix(self._read_buffer, loc)</span><br><span class="line">    <span class="keyword">return</span> self._read_buffer.popleft()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_check_closed</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.socket:</span><br><span class="line">        <span class="keyword">raise</span> IOError(<span class="string">"Stream is closed"</span>)</span><br></pre></td></tr></table></figure><h2 id="IOStream-add-io-state"><a href="#IOStream-add-io-state" class="headerlink" title="IOStream._add_io_state"></a>IOStream._add_io_state</h2><p>增加 socket 事件状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_add_io_state</span><span class="params">(self, state)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self.socket <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="comment"># connection has been closed, so there can be no future events</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._state &amp; state:</span><br><span class="line">        self._state = self._state | state</span><br><span class="line">        self.io_loop.update_handler(self.socket.fileno(), self._state)</span><br></pre></td></tr></table></figure><h2 id="IOStream-read-buffer-size"><a href="#IOStream-read-buffer-size" class="headerlink" title="IOStream._read_buffer_size"></a>IOStream._read_buffer_size</h2><p>获取读缓存中已有数据长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_read_buffer_size</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> sum(len(chunk) <span class="keyword">for</span> chunk <span class="keyword">in</span> self._read_buffer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SSLIOStream</span><span class="params">(IOStream)</span>:</span></span><br><span class="line">    <span class="string">"""A utility class to write to and read from a non-blocking socket.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If the socket passed to the constructor is already connected,</span></span><br><span class="line"><span class="string">    it should be wrapped with</span></span><br><span class="line"><span class="string">        ssl.wrap_socket(sock, do_handshake_on_connect=False, **kwargs)</span></span><br><span class="line"><span class="string">    before constructing the SSLIOStream.  Unconnected sockets will be</span></span><br><span class="line"><span class="string">    wrapped when IOStream.connect is finished.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""Creates an SSLIOStream.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        If a dictionary is provided as keyword argument ssl_options,</span></span><br><span class="line"><span class="string">        it will be used as additional keyword arguments to ssl.wrap_socket.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._ssl_options = kwargs.pop(<span class="string">'ssl_options'</span>, &#123;&#125;)</span><br><span class="line">        super(SSLIOStream, self).__init__(*args, **kwargs)</span><br><span class="line">        self._ssl_accepting = <span class="literal">True</span></span><br><span class="line">        self._handshake_reading = <span class="literal">False</span></span><br><span class="line">        self._handshake_writing = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reading</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._handshake_reading <span class="keyword">or</span> super(SSLIOStream, self).reading()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">writing</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._handshake_writing <span class="keyword">or</span> super(SSLIOStream, self).writing()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_do_ssl_handshake</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># Based on code from test_ssl.py in the python stdlib</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._handshake_reading = <span class="literal">False</span></span><br><span class="line">            self._handshake_writing = <span class="literal">False</span></span><br><span class="line">            self.socket.do_handshake()</span><br><span class="line">        <span class="keyword">except</span> ssl.SSLError, err:</span><br><span class="line">            <span class="keyword">if</span> err.args[<span class="number">0</span>] == ssl.SSL_ERROR_WANT_READ:</span><br><span class="line">                self._handshake_reading = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> err.args[<span class="number">0</span>] == ssl.SSL_ERROR_WANT_WRITE:</span><br><span class="line">                self._handshake_writing = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">elif</span> err.args[<span class="number">0</span>] <span class="keyword">in</span> (ssl.SSL_ERROR_EOF,</span><br><span class="line">                                 ssl.SSL_ERROR_ZERO_RETURN):</span><br><span class="line">                <span class="keyword">return</span> self.close()</span><br><span class="line">            <span class="keyword">elif</span> err.args[<span class="number">0</span>] == ssl.SSL_ERROR_SSL:</span><br><span class="line">                logging.warning(<span class="string">"SSL Error on %d: %s"</span>, self.socket.fileno(), err)</span><br><span class="line">                <span class="keyword">return</span> self.close()</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span> socket.error, err:</span><br><span class="line">            <span class="keyword">if</span> err.args[<span class="number">0</span>] == errno.ECONNABORTED:</span><br><span class="line">                <span class="keyword">return</span> self.close()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._ssl_accepting = <span class="literal">False</span></span><br><span class="line">            super(SSLIOStream, self)._handle_connect()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_handle_read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._ssl_accepting:</span><br><span class="line">            self._do_ssl_handshake()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        super(SSLIOStream, self)._handle_read()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_handle_write</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self._ssl_accepting:</span><br><span class="line">            self._do_ssl_handshake()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        super(SSLIOStream, self)._handle_write()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_handle_connect</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.socket = ssl.wrap_socket(self.socket,</span><br><span class="line">                                      do_handshake_on_connect=<span class="literal">False</span>,</span><br><span class="line">                                      **self._ssl_options)</span><br><span class="line">        <span class="comment"># Don't call the superclass's _handle_connect (which is responsible</span></span><br><span class="line">        <span class="comment"># for telling the application that the connection is complete)</span></span><br><span class="line">        <span class="comment"># until we've completed the SSL handshake (so certificates are</span></span><br><span class="line">        <span class="comment"># available, etc).</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_read_from_socket</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># SSLSocket objects have both a read() and recv() method,</span></span><br><span class="line">            <span class="comment"># while regular sockets only have recv().</span></span><br><span class="line">            <span class="comment"># The recv() method blocks (at least in python 2.6) if it is</span></span><br><span class="line">            <span class="comment"># called when there is nothing to read, so we have to use</span></span><br><span class="line">            <span class="comment"># read() instead.</span></span><br><span class="line">            chunk = self.socket.read(self.read_chunk_size)</span><br><span class="line">        <span class="keyword">except</span> ssl.SSLError, e:</span><br><span class="line">            <span class="comment"># SSLError is a subclass of socket.error, so this except</span></span><br><span class="line">            <span class="comment"># block must come first.</span></span><br><span class="line">            <span class="keyword">if</span> e.args[<span class="number">0</span>] == ssl.SSL_ERROR_WANT_READ:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">except</span> socket.error, e:</span><br><span class="line">            <span class="keyword">if</span> e.args[<span class="number">0</span>] <span class="keyword">in</span> (errno.EWOULDBLOCK, errno.EAGAIN):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> chunk:</span><br><span class="line">            self.close()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">return</span> chunk</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_merge_prefix</span><span class="params">(deque, size)</span>:</span></span><br><span class="line">    <span class="string">"""Replace the first entries in a deque of strings with a single</span></span><br><span class="line"><span class="string">    string of up to size bytes.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; d = collections.deque(['abc', 'de', 'fghi', 'j'])</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; _merge_prefix(d, 5); print d</span></span><br><span class="line"><span class="string">    deque(['abcde', 'fghi', 'j'])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Strings will be split as necessary to reach the desired size.</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; _merge_prefix(d, 7); print d</span></span><br><span class="line"><span class="string">    deque(['abcdefg', 'hi', 'j'])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; _merge_prefix(d, 3); print d</span></span><br><span class="line"><span class="string">    deque(['abc', 'defg', 'hi', 'j'])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; _merge_prefix(d, 100); print d</span></span><br><span class="line"><span class="string">    deque(['abcdefghij'])</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    prefix = []</span><br><span class="line">    remaining = size</span><br><span class="line">    <span class="keyword">while</span> deque <span class="keyword">and</span> remaining &gt; <span class="number">0</span>:</span><br><span class="line">        chunk = deque.popleft()</span><br><span class="line">        <span class="keyword">if</span> len(chunk) &gt; remaining:</span><br><span class="line">            deque.appendleft(chunk[remaining:])</span><br><span class="line">            chunk = chunk[:remaining]</span><br><span class="line">        prefix.append(chunk)</span><br><span class="line">        remaining -= len(chunk)</span><br><span class="line">    deque.appendleft(<span class="string">''</span>.join(prefix))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">doctests</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> doctest</span><br><span class="line">    <span class="keyword">return</span> doctest.DocTestSuite()</span><br></pre></td></tr></table></figure><h2 id="copyright"><a href="#copyright" class="headerlink" title="copyright"></a>copyright</h2><p>author：bigfish<br>copyright: <a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">许可协议 知识共享署名 - 非商业性使用 4.0 国际许可协议</a></p><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/8" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/8</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;iostream-py&quot;&gt;&lt;a href=&quot;#iostream-py&quot; class=&quot;headerlink&quot; title=&quot;iostream.py&quot;&gt;&lt;/a&gt;iostream.py&lt;/h1&gt;&lt;p&gt;A utility class to write to and re
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python decorators</title>
    <link href="http://yoursite.com/2018/11/29/python-decorators/"/>
    <id>http://yoursite.com/2018/11/29/python-decorators/</id>
    <published>2018-11-29T01:19:21.000Z</published>
    <updated>2018-11-29T01:19:21.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-decorators"><a href="#python-decorators" class="headerlink" title="python decorators"></a>python decorators</h1><h2 id="装饰器基础"><a href="#装饰器基础" class="headerlink" title="装饰器基础"></a>装饰器基础</h2><h3 id="Decorator-本质"><a href="#Decorator-本质" class="headerlink" title="Decorator 本质"></a>Decorator 本质</h3><p>@ 本质是语法糖 - Syntactic Sugar<br>使用 @decorator 来修饰某个函数 func 时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>其解释器会解释成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func = decorator(func)</span><br></pre></td></tr></table></figure><p>注意这条语句会被执行</p><p><strong>多重装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator_one</span></span><br><span class="line"><span class="meta">@decorator_two</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func = decorator_one(decorator_two(func))</span><br></pre></td></tr></table></figure><p><strong>带参数装饰器</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator(arg1, arg2)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func = decorator(arg1,arg2)(func)</span><br></pre></td></tr></table></figure><h3 id="使用-args、-kwargs-给被装饰函数传递参数"><a href="#使用-args、-kwargs-给被装饰函数传递参数" class="headerlink" title="使用 *args、**kwargs 给被装饰函数传递参数"></a>使用 <code>*args、**kwargs</code> 给被装饰函数传递参数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper_in</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># args是一个数组，kwargs一个字典</span></span><br><span class="line">        print(<span class="string">"%s is running"</span> % func.__name__)</span><br><span class="line">        <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">    <span class="keyword">return</span> wrapper_in</span><br><span class="line"></span><br><span class="line"><span class="meta">@wrapper</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(parameter1, parameter2, key1=<span class="number">1</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"call func with &#123;&#125; &#123;&#125; &#123;&#125;"</span>.format(parameter1, parameter2, key1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="string">"haha"</span>, <span class="literal">None</span>, key1=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># func is running</span></span><br><span class="line"><span class="comment"># call func with haha None 2</span></span><br></pre></td></tr></table></figure><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">log</span><span class="params">(level)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decorator</span><span class="params">(func)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> level == <span class="string">"warn"</span>:</span><br><span class="line">                print(<span class="string">"%s with warn is running"</span> % func.__name__)</span><br><span class="line">            <span class="keyword">elif</span> level == <span class="string">"info"</span>:</span><br><span class="line">                print(<span class="string">"%s with info is running"</span> % func.__name__)</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@log("warn")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">    print(<span class="string">"args &#123;&#125;, kwargs&#123;&#125;"</span>.format(args, kwargs))</span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, a = <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># foo with warn is running</span></span><br><span class="line"><span class="comment"># args (1, 2), kwargs&#123;'a': 3&#125;</span></span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(name=<span class="string">'foo'</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"args &#123;&#125;, kwargs&#123;&#125;"</span>.format(args, kwargs))</span><br><span class="line"></span><br><span class="line">foo = log(<span class="string">"warn"</span>)(foo)</span><br></pre></td></tr></table></figure><h3 id="方法装饰器"><a href="#方法装饰器" class="headerlink" title="方法装饰器"></a>方法装饰器</h3><p>类方法是一个特殊的函数，它的第一个参数 self 指向类实例<br>所以我们同样可以装饰类方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorate</span><span class="params">(func)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(self)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"&lt;p&gt;&#123;0&#125;&lt;/p&gt;"</span>.format(func(self))</span><br><span class="line">   <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"John"</span></span><br><span class="line">        self.family = <span class="string">"Doe"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @decorate</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_fullname</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name+<span class="string">" "</span>+self.family</span><br><span class="line"></span><br><span class="line">my_person = Person()</span><br><span class="line"><span class="keyword">print</span> my_person.get_fullname()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;p&gt;John Doe&lt;/p&gt;</span></span><br></pre></td></tr></table></figure><p>上例相当于固定了 self 参数, 不太灵活<br>使用 <code>*args, **kwargs</code>传递给 wrapper 更加通用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pecorate</span><span class="params">(func)</span>:</span></span><br><span class="line">   <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"&lt;p&gt;&#123;0&#125;&lt;/p&gt;"</span>.format(func(*args, **kwargs))</span><br><span class="line">   <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"John"</span></span><br><span class="line">        self.family = <span class="string">"Doe"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @pecorate</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_fullname</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name+<span class="string">" "</span>+self.family</span><br><span class="line"></span><br><span class="line">my_person = Person()</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> my_person.get_fullname()</span><br></pre></td></tr></table></figure><h3 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h3><p>类实现 <code>__call__</code> 方法后变成可调用对象，故可以用类做装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EntryExit</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, f)</span>:</span></span><br><span class="line">        self.f = f</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Entering"</span>, self.f.__name__</span><br><span class="line">        self.f()</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"Exited"</span>, self.f.__name__</span><br><span class="line"></span><br><span class="line"><span class="meta">@EntryExit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"inside func1()"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@EntryExit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"inside func2()"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> type(EntryExit(<span class="literal">None</span>))</span><br><span class="line"><span class="comment"># func1 变为类实例</span></span><br><span class="line"><span class="keyword">print</span> type(func1)</span><br><span class="line"><span class="keyword">print</span> type(EntryExit)</span><br><span class="line"><span class="comment"># func3 是普通函数</span></span><br><span class="line"><span class="keyword">print</span> type(func3)</span><br><span class="line">func1()</span><br><span class="line">func2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># &lt;class '__main__.EntryExit'&gt;</span></span><br><span class="line"><span class="comment"># &lt;class '__main__.EntryExit'&gt;</span></span><br><span class="line"><span class="comment"># &lt;type 'type'&gt;</span></span><br><span class="line"><span class="comment"># &lt;type 'function'&gt;</span></span><br><span class="line"><span class="comment"># Entering func1</span></span><br><span class="line"><span class="comment"># inside func1()</span></span><br><span class="line"><span class="comment"># Exited func1</span></span><br><span class="line"><span class="comment"># Entering func2</span></span><br><span class="line"><span class="comment"># inside func2()</span></span><br><span class="line"><span class="comment"># Exited func2</span></span><br></pre></td></tr></table></figure><p>类装饰器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EntryExit</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"inside func1()"</span></span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"inside func1()"</span></span><br><span class="line"><span class="comment"># 此处可以看出 func1 是类EntryExit的一个实例</span></span><br><span class="line">func1 = EntryExit(myfunc1)</span><br></pre></td></tr></table></figure><h3 id="装饰器装饰类"><a href="#装饰器装饰类" class="headerlink" title="装饰器装饰类"></a>装饰器装饰类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">register_handles = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">route</span><span class="params">(url)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> register_handles</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(handler)</span>:</span></span><br><span class="line">        register_handles.append((<span class="string">".*$"</span>, [(url, handler)]))</span><br><span class="line">        <span class="keyword">return</span> handler</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> register</span><br><span class="line"></span><br><span class="line"><span class="meta">@route("/index")</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"hi"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Index 仍然为原来定义的类实例</span></span><br><span class="line"><span class="comment"># 相当于在定义类的同时调用装饰器函数 route， 将该类注册到全局路由 register_handles</span></span><br><span class="line"><span class="meta">@route("/main")</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"hi"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (register_handles)</span><br><span class="line"></span><br><span class="line">print(type(Index))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [('.*$', [('/index', &lt;class __main__.Index at 0x0000000002A49828&gt;)]), ('.*$', [('/main', &lt;class __main__.Main at 0x0000000002FBABE8&gt;)])]</span></span><br><span class="line"><span class="comment"># &lt;type 'classobj'&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@route("/index")</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"hi"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Index = route(<span class="string">"/index"</span>)(Index)</span><br><span class="line"><span class="comment"># register 返回传入的 handler,故 Index 仍然为类对象</span></span><br></pre></td></tr></table></figure><h2 id="functools"><a href="#functools" class="headerlink" title="functools"></a>functools</h2><p>上述装饰器实现有个问题，就是被装饰函数的属性被改变</p><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/7" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/7</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-decorators&quot;&gt;&lt;a href=&quot;#python-decorators&quot; class=&quot;headerlink&quot; title=&quot;python decorators&quot;&gt;&lt;/a&gt;python decorators&lt;/h1&gt;&lt;h2 id=&quot;装饰器基础
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python setup.py 浅析</title>
    <link href="http://yoursite.com/2018/11/16/python-setup.py--qian-xi/"/>
    <id>http://yoursite.com/2018/11/16/python-setup.py--qian-xi/</id>
    <published>2018-11-16T06:02:43.000Z</published>
    <updated>2018-11-28T05:36:36.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-setup-py-浅析"><a href="#python-setup-py-浅析" class="headerlink" title="python setup.py 浅析"></a>python setup.py 浅析</h1><h2 id="setuptools-setup-参数说明"><a href="#setuptools-setup-参数说明" class="headerlink" title="setuptools.setup() 参数说明"></a>setuptools.setup() 参数说明</h2><h3 id="packages"><a href="#packages" class="headerlink" title="packages"></a>packages</h3><p>对于所有 packages 列表里提到的纯 Python 模块做处理<br>需要在 setup 脚本里有一个包名到目录的映射。<br>默认对于 setup 脚本所在目录下同名的目录即视为包所在目录。<br>当你在 setup 脚本中写入 packages = [‘foo’] 时， setup 脚本的同级目录下可以找到 <code>foo/__init__.py</code>。如果没有找到对应文件，disutils 不会直接报错，而是给出一个告警然后继续进行有问题的打包流程。</p><h3 id="package-dir"><a href="#package-dir" class="headerlink" title="package_dir"></a>package_dir</h3><p>阐明包名到目录的映射，见 packages</p><pre><code>package_dir = {&apos;&apos;: &apos;lib&apos;}</code></pre><p>键: 代表了包的名字，空的包名则代表 root package(不在任何包中的顶层包)。<br>值: 代表了对于 setup 脚本所在目录的相对路径.</p><pre><code>packages = [&apos;foo&apos;]package_dir = {&apos;&apos;: &apos;lib&apos;}</code></pre><p>指明包位于 lib/foo/, <code>lib/foo/__init__.py</code> 这个文件存在</p><p>另一种方法则是直接将 foo 这个包的内容全部放入 lib 而不是在 lib 下建一个 foo 目录</p><pre><code>package_dir = {&apos;foo&apos;: &apos;lib&apos;}</code></pre><p>一个在 package_dir 字典中的 package: dir 映射会对当前包下的所有包都生效， 所以 foo.bar 会自动生效. 在这个例子当中， <code>packages = [&#39;foo&#39;, &#39;foo.bar&#39;]</code> 告诉 distutils 去寻找 <code>lib/__init__.py</code> 和 <code>lib/bar/__init__.py</code>.</p><h3 id="py-modules"><a href="#py-modules" class="headerlink" title="py_modules"></a>py_modules</h3><p>对于一个相对较小的模块的发布，你可能更想要列出所有模块而不是列出所有的包，尤其是对于那种根目录下就是一个简单模块的类型.<br>这描述了两个包，一个在根目录下，另一个则在 pkg 目录下。<br>默认的 “包：目录” 映射关系表明你可以在 setup 脚本所在的路径下找到 mod1.py 和 pkg/mod2.py。<br>当然，你也可以用 package_dir 选项重写这层映射关系就是了。</p><h3 id="find-packages"><a href="#find-packages" class="headerlink" title="find_packages"></a>find_packages</h3><p>packages=find_packages(exclude=(‘tests’, ‘robot_server.scripts’)),<br>exclude 里面是包名，而非路径</p><h3 id="include-package-data"><a href="#include-package-data" class="headerlink" title="include_package_data"></a>include_package_data</h3><p>引入包内的非 Python 文件<br>include_package_data 需要配合 MANIFEST.in 一起使用</p><p>MANIFEST.in:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">include myapp/scripts/start.py</span><br><span class="line">recursive-include myapp/static *</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup(</span><br><span class="line">    name=<span class="string">'MyApp'</span>,         <span class="comment"># 应用名</span></span><br><span class="line">    version=<span class="string">'1.0'</span>,        <span class="comment"># 版本号</span></span><br><span class="line">    packages=[<span class="string">'myapp'</span>],   <span class="comment"># 包括在安装包内的Python包</span></span><br><span class="line">    include_package_data=<span class="literal">True</span>    <span class="comment"># 启用清单文件MANIFEST.in</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>注意，此处引入或者排除的文件必须是 package 内的文件</p><pre><code>setup-demo/  ├ mydata.data      # 数据文件  ├ setup.py         # 安装文件  ├ MANIFEST.in      # 清单文件  └ myapp/           # 源代码      ├ static/      # 静态文件目录      ├ __init__.py      ...</code></pre><p>在 MANIFEST.in 引入 include mydata.data 将不起作用</p><h3 id="exclude-package-date"><a href="#exclude-package-date" class="headerlink" title="exclude_package_date"></a>exclude_package_date</h3><p>排除一部分包文件<br>{‘myapp’:[‘.gitignore]}，就表明只排除 myapp 包下的所有. gitignore 文件。</p><h3 id="data-files"><a href="#data-files" class="headerlink" title="data_files"></a>data_files</h3><p>指定其他的一些文件（如配置文件）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data_files=[(<span class="string">'bitmaps'</span>, [<span class="string">'bm/b1.gif'</span>, <span class="string">'bm/b2.gif'</span>]),</span><br><span class="line">            (<span class="string">'config'</span>, [<span class="string">'cfg/data.cfg'</span>]),</span><br><span class="line">            (<span class="string">'/etc/init.d'</span>, [<span class="string">'init-script'</span>])]</span><br></pre></td></tr></table></figure><p>规定了哪些文件被安装到哪些目录中。<br>如果目录名是相对路径 (比如 bitmaps)，则是相对于 sys.prefix(/usr) 或 sys.exec_prefix 的路径。<br>否则安装到绝对路径 (比如 /etc/init.d)。</p><h3 id="cmdclass"><a href="#cmdclass" class="headerlink" title="cmdclass"></a>cmdclass</h3><p>定制化命令，通过继承 setuptools.command 下的命令类来进行定制化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadCommand</span><span class="params">(Command)</span>:</span></span><br><span class="line">    <span class="string">"""Support setup.py upload."""</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.status(<span class="string">'Removing previous builds…'</span>)</span><br><span class="line">            rmtree(os.path.join(here, <span class="string">'dist'</span>))</span><br><span class="line">        <span class="keyword">except</span> OSError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        self.status(<span class="string">'Building Source and Wheel (universal) distribution…'</span>)</span><br><span class="line">        os.system(<span class="string">'&#123;0&#125; setup.py sdist bdist_wheel --universal'</span>.format(sys.executable))</span><br><span class="line"></span><br><span class="line">        self.status(<span class="string">'Uploading the package to PyPI via Twine…'</span>)</span><br><span class="line">        os.system(<span class="string">'twine upload dist/*'</span>)</span><br><span class="line"></span><br><span class="line">        self.status(<span class="string">'Pushing git tags…'</span>)</span><br><span class="line">        os.system(<span class="string">'git tag v&#123;0&#125;'</span>.format(about[<span class="string">'__version__'</span>]))</span><br><span class="line">        os.system(<span class="string">'git push --tags'</span>)</span><br><span class="line"></span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># $ setup.py publish support.</span></span><br><span class="line">    cmdclass=&#123;</span><br><span class="line">        <span class="string">'upload'</span>: UploadCommand,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这样可以通过 <code>python setup.py upload</code> 运行打包上传代码</p><h3 id="install-requires"><a href="#install-requires" class="headerlink" title="install_requires"></a>install_requires</h3><p>安装这个包所需要的依赖，列表</p><h3 id="tests-require"><a href="#tests-require" class="headerlink" title="tests_require"></a>tests_require</h3><p>与 install_requires 作用相似，单元测试时所需要的依赖</p><h2 id="虚拟运行环境下安装包"><a href="#虚拟运行环境下安装包" class="headerlink" title="虚拟运行环境下安装包"></a>虚拟运行环境下安装包</h2><p>以 <a href="https://github.com/kennethreitz/legit" target="_blank" rel="noopener">legit</a> 为例</p><ul><li><p>下载 lgit 源码<br><code>git clone https://github.com/kennethreitz/legit.git</code></p></li><li><p>创建虚拟运行环境<br><code>virtualenv --no-site-packages venv</code><br>运行环境目录结构为：</p><pre><code>venv/├── bin├── include├── lib├── local└── pip-selfcheck.json</code></pre></li><li><p>打包工程<br><code>python3 setup.py sdist bdist_wheel</code></p><pre><code>.├── AUTHORS├── build│   ├── bdist.linux-x86_64│   └── lib.linux-x86_64-2.7├── dist│   ├── legit-1.0.1-py2.py3-none-any.whl│   └── legit-1.0.1.tar.gz</code></pre><p>在 dist 下生成了安装包</p></li><li><p>进入虚拟环境<br><code>source venv/bin/activate</code></p></li><li><p>安装包<br> <code>pip install ./dist/legit-1.0.1.tar.gz</code></p><pre><code>Successfully built legit args clintInstalling collected packages: appdirs, args, click, lint, colorama, crayons, smmap2, gitdb2, GitPython, ix, pyparsing, packaging, legitSuccessfully installed GitPython-2.1.8 appdirs-1.4.3 rgs-0.1.0 click-6.7 clint-0.5.1 colorama-0.4.0 rayons-0.1.2 gitdb2-2.0.3 legit-1.0.1 packaging-17.1 yparsing-2.2.0 six-1.11.0 smmap2-2.0.3</code></pre></li></ul><h2 id="安装过程分析"><a href="#安装过程分析" class="headerlink" title="安装过程分析"></a>安装过程分析</h2><p><code>venv/lib/python2.7/site-packages/</code> 下安装了 legit 及依赖包</p><pre><code>legit/venv/lib/python2.7/site-packages$ tree -L 1.├── appdirs-1.4.3.dist-info├── appdirs.py├── appdirs.pyc├── args-0.1.0.dist-info├── args.py├── args.pyc├── click├── click-6.7.dist-info├── clint├── clint-0.5.1.dist-info├── colorama├── colorama-0.4.0.dist-info├── crayons-0.1.2.dist-info├── crayons.py├── crayons.pyc├── easy_install.py├── easy_install.pyc├── git├── gitdb├── gitdb2-2.0.3.dist-info├── GitPython-2.1.8.dist-info├── legit├── legit-1.0.1.dist-info├── packaging├── packaging-17.1.dist-info├── pip├── pip-18.1.dist-info├── pkg_resources├── pyparsing-2.2.0.dist-info├── pyparsing.py├── pyparsing.pyc├── setuptools├── setuptools-40.6.2.dist-info├── six-1.11.0.dist-info├── six.py├── six.pyc├── smmap├── smmap2-2.0.3.dist-info├── wheel└── wheel-0.32.2.dist-info</code></pre><p><code>venv/bin</code> 下新增可执行文件 legit, 内容为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/home/turtlebot/learn/python/legit/venv/bin/python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> legit.cli <span class="keyword">import</span> cli</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    sys.argv[<span class="number">0</span>] = re.sub(<span class="string">r'(-script\.pyw?|\.exe)?$'</span>, <span class="string">''</span>, sys.argv[<span class="number">0</span>])</span><br><span class="line">    sys.exit(cli())</span><br></pre></td></tr></table></figure><p>此时，可以直接运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; legit</span><br></pre></td></tr></table></figure><h2 id="setup-py-分析"><a href="#setup-py-分析" class="headerlink" title="setup.py 分析"></a>setup.py 分析</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> codecs <span class="keyword">import</span> open  <span class="comment"># To use a consistent encoding</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup  <span class="comment"># Always prefer setuptools over distutils</span></span><br><span class="line"></span><br><span class="line">APP_NAME = <span class="string">'legit'</span></span><br><span class="line">APP_SCRIPT = <span class="string">'./legit_r'</span></span><br><span class="line">VERSION = <span class="string">'1.0.1'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Grab requirements.</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'reqs.txt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    required = f.readlines()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">settings = dict()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Publish Helper.</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">-1</span>] == <span class="string">'publish'</span>:</span><br><span class="line">    os.system(<span class="string">'python setup.py sdist bdist_wheel upload'</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">-1</span>] == <span class="string">'build_manpage'</span>:</span><br><span class="line">    os.system(<span class="string">'rst2man.py README.rst &gt; extra/man/legit.1'</span>)</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build Helper.</span></span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">-1</span>] == <span class="string">'build'</span>:</span><br><span class="line">    <span class="keyword">import</span> py2exe  <span class="comment"># noqa</span></span><br><span class="line">    sys.argv.append(<span class="string">'py2exe'</span>)</span><br><span class="line"></span><br><span class="line">    settings.update(</span><br><span class="line">        console=[&#123;<span class="string">'script'</span>: APP_SCRIPT&#125;],</span><br><span class="line">        zipfile=<span class="literal">None</span>,</span><br><span class="line">        options=&#123;</span><br><span class="line">            <span class="string">'py2exe'</span>: &#123;</span><br><span class="line">                <span class="string">'compressed'</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="string">'optimize'</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="string">'bundle_files'</span>: <span class="number">1</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">settings.update(</span><br><span class="line">    name=APP_NAME,</span><br><span class="line">    version=VERSION,</span><br><span class="line">    description=<span class="string">'Git for Humans.'</span>,</span><br><span class="line">    long_description=open(<span class="string">'README.rst'</span>).read(),</span><br><span class="line">    author=<span class="string">'Kenneth Reitz'</span>,</span><br><span class="line">    author_email=<span class="string">'me@kennethreitz.com'</span>,</span><br><span class="line">    url=<span class="string">'https://github.com/kennethreitz/legit'</span>,</span><br><span class="line">    packages=[<span class="string">'legit'</span>],</span><br><span class="line">    install_requires=required,</span><br><span class="line">    license=<span class="string">'BSD'</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="string">'Development Status :: 5 - Production/Stable'</span>,</span><br><span class="line">        <span class="string">'Intended Audience :: Developers'</span>,</span><br><span class="line">        <span class="string">'Natural Language :: English'</span>,</span><br><span class="line">        <span class="string">'License :: OSI Approved :: BSD License'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 2'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 2.7'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.4'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.5'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.6'</span>,</span><br><span class="line">    ],</span><br><span class="line">    entry_points=&#123;</span><br><span class="line">        <span class="string">'console_scripts'</span>: [</span><br><span class="line">            <span class="string">'legit = legit.cli:cli'</span>,</span><br><span class="line">        ],</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">setup(**settings)</span><br></pre></td></tr></table></figure><ul><li>packages=[‘legit’] 引入 legit 目录下的所有默认引入文件</li><li>install_requires=required 指明安装时需要额外安装的第三方库</li><li><code>&#39;console_scripts&#39;: [&#39;legit = legit.cli:cli&#39;,]</code> 生成可执行控制台程序，程序名为 legit, 运行 legit.cli 中的 cli() 函数。最终会在 bin/ 下生成 legit 可执行 py 文件，调用制定的函数</li></ul><h2 id="setup-py-实例分析"><a href="#setup-py-实例分析" class="headerlink" title="setup.py 实例分析"></a>setup.py 实例分析</h2><p><a href="https://github.com/kennethreitz/setup.py" target="_blank" rel="noopener">kennethreitz/setup.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note: To use the 'upload' functionality of this file, you must:</span></span><br><span class="line"><span class="comment">#   $ pip install twine</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> shutil <span class="keyword">import</span> rmtree</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> find_packages, setup, Command</span><br><span class="line"></span><br><span class="line"><span class="comment"># Package meta-data.</span></span><br><span class="line">NAME = <span class="string">'mypackage'</span></span><br><span class="line">DESCRIPTION = <span class="string">'My short description for my project.'</span></span><br><span class="line">URL = <span class="string">'https://github.com/me/myproject'</span></span><br><span class="line">EMAIL = <span class="string">'me@example.com'</span></span><br><span class="line">AUTHOR = <span class="string">'Awesome Soul'</span></span><br><span class="line">REQUIRES_PYTHON = <span class="string">'&gt;=3.6.0'</span></span><br><span class="line">VERSION = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># What packages are required for this module to be executed?</span></span><br><span class="line">REQUIRED = [</span><br><span class="line">    <span class="comment"># 'requests', 'maya', 'records',</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># What packages are optional?</span></span><br><span class="line">EXTRAS = &#123;</span><br><span class="line">    <span class="comment"># 'fancy feature': ['django'],</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># The rest you shouldn't have to touch too much :)</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># Except, perhaps the License and Trove Classifiers!</span></span><br><span class="line"><span class="comment"># If you do change the License, remember to change the Trove Classifier for that!</span></span><br><span class="line"></span><br><span class="line">here = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Import the README and use it as the long-description.</span></span><br><span class="line"><span class="comment"># Note: this will only work if 'README.md' is present in your MANIFEST.in file!</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> io.open(os.path.join(here, <span class="string">'README.md'</span>), encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        long_description = <span class="string">'\n'</span> + f.read()</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    long_description = DESCRIPTION</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load the package's __version__.py module as a dictionary.</span></span><br><span class="line">about = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> VERSION:</span><br><span class="line">    <span class="keyword">with</span> open(os.path.join(here, NAME, <span class="string">'__version__.py'</span>)) <span class="keyword">as</span> f:</span><br><span class="line">        exec(f.read(), about)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    about[<span class="string">'__version__'</span>] = VERSION</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UploadCommand</span><span class="params">(Command)</span>:</span></span><br><span class="line">    <span class="string">"""Support setup.py upload."""</span></span><br><span class="line"></span><br><span class="line">    description = <span class="string">'Build and publish the package.'</span></span><br><span class="line">    user_options = []</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">status</span><span class="params">(s)</span>:</span></span><br><span class="line">        <span class="string">"""Prints things in bold."""</span></span><br><span class="line">        print(<span class="string">'\033[1m&#123;0&#125;\033[0m'</span>.format(s))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize_options</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">finalize_options</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.status(<span class="string">'Removing previous builds…'</span>)</span><br><span class="line">            rmtree(os.path.join(here, <span class="string">'dist'</span>))</span><br><span class="line">        <span class="keyword">except</span> OSError:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">        self.status(<span class="string">'Building Source and Wheel (universal) distribution…'</span>)</span><br><span class="line">        os.system(<span class="string">'&#123;0&#125; setup.py sdist bdist_wheel --universal'</span>.format(sys.executable))</span><br><span class="line"></span><br><span class="line">        self.status(<span class="string">'Uploading the package to PyPI via Twine…'</span>)</span><br><span class="line">        os.system(<span class="string">'twine upload dist/*'</span>)</span><br><span class="line"></span><br><span class="line">        self.status(<span class="string">'Pushing git tags…'</span>)</span><br><span class="line">        os.system(<span class="string">'git tag v&#123;0&#125;'</span>.format(about[<span class="string">'__version__'</span>]))</span><br><span class="line">        os.system(<span class="string">'git push --tags'</span>)</span><br><span class="line"></span><br><span class="line">        sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Where the magic happens:</span></span><br><span class="line">setup(</span><br><span class="line">    name=NAME,</span><br><span class="line">    version=about[<span class="string">'__version__'</span>],</span><br><span class="line">    description=DESCRIPTION,</span><br><span class="line">    long_description=long_description,</span><br><span class="line">    long_description_content_type=<span class="string">'text/markdown'</span>,</span><br><span class="line">    author=AUTHOR,</span><br><span class="line">    author_email=EMAIL,</span><br><span class="line">    python_requires=REQUIRES_PYTHON,</span><br><span class="line">    url=URL,</span><br><span class="line">    packages=find_packages(exclude=(<span class="string">'tests'</span>,)),</span><br><span class="line">    <span class="comment"># If your package is a single module, use this instead of 'packages':</span></span><br><span class="line">    <span class="comment"># py_modules=['mypackage'],</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># entry_points=&#123;</span></span><br><span class="line">    <span class="comment">#     'console_scripts': ['mycli=mymodule:cli'],</span></span><br><span class="line">    <span class="comment"># &#125;,</span></span><br><span class="line">    install_requires=REQUIRED,</span><br><span class="line">    extras_require=EXTRAS,</span><br><span class="line">    include_package_data=<span class="literal">True</span>,</span><br><span class="line">    license=<span class="string">'MIT'</span>,</span><br><span class="line">    classifiers=[</span><br><span class="line">        <span class="comment"># Trove classifiers</span></span><br><span class="line">        <span class="comment"># Full list: https://pypi.python.org/pypi?%3Aaction=list_classifiers</span></span><br><span class="line">        <span class="string">'License :: OSI Approved :: MIT License'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: 3.6'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: Implementation :: CPython'</span>,</span><br><span class="line">        <span class="string">'Programming Language :: Python :: Implementation :: PyPy'</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="comment"># $ setup.py publish support.</span></span><br><span class="line">    cmdclass=&#123;</span><br><span class="line">        <span class="string">'upload'</span>: UploadCommand,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/6" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/6</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-setup-py-浅析&quot;&gt;&lt;a href=&quot;#python-setup-py-浅析&quot; class=&quot;headerlink&quot; title=&quot;python setup.py 浅析&quot;&gt;&lt;/a&gt;python setup.py 浅析&lt;/h1&gt;&lt;h2 id=&quot;s
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 多线程编程</title>
    <link href="http://yoursite.com/2018/11/15/python--duo-xian-cheng-bian-cheng/"/>
    <id>http://yoursite.com/2018/11/15/python--duo-xian-cheng-bian-cheng/</id>
    <published>2018-11-15T05:41:30.000Z</published>
    <updated>2018-11-15T05:41:30.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-多线程编程"><a href="#python-多线程编程" class="headerlink" title="python 多线程编程"></a>python 多线程编程</h1><h2 id="使用回调方式"><a href="#使用回调方式" class="headerlink" title="使用回调方式"></a>使用回调方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'T-minus'</span>, n)</span><br><span class="line">        n -= <span class="number">1</span></span><br><span class="line">        time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create and launch a thread</span></span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line">t = Thread(target=countdown, args=(<span class="number">10</span>,))</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h2 id="使用继承方式"><a href="#使用继承方式" class="headerlink" title="使用继承方式"></a>使用继承方式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountdownTask</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._running = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">terminate</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._running = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, n)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> self._running <span class="keyword">and</span> n &gt; <span class="number">0</span>:</span><br><span class="line">            print(<span class="string">'T-minus'</span>, n)</span><br><span class="line">            n -= <span class="number">1</span></span><br><span class="line">            time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">c = CountdownTask()</span><br><span class="line">t = Thread(target=c.run, args=(<span class="number">10</span>,))</span><br><span class="line">t.start()</span><br><span class="line">c.terminate() <span class="comment"># Signal termination</span></span><br><span class="line">t.join()      <span class="comment"># Wait for actual termination (if needed)</span></span><br></pre></td></tr></table></figure><p>注意使用变量 <code>self._running</code> 退出线程的方式</p><h2 id="使用-Queue-进行线程间通信"><a href="#使用-Queue-进行线程间通信" class="headerlink" title="使用 Queue 进行线程间通信"></a>使用 Queue 进行线程间通信</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">task_queue = Queue.Queue()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, queue)</span>:</span></span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.queue = queue</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            msg = self.queue.get()</span><br><span class="line">            print(msg)</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            self.queue.task_done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="comment"># populate queue with data</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        task_queue.put(<span class="string">"message"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># spawn a pool of threads, and pass them queue instance</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        t = ThreadTest(task_queue)</span><br><span class="line">        t.setDaemon(<span class="literal">True</span>)</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># wait on the queue until everything has been processed</span></span><br><span class="line">    task_queue.join()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Elapsed Time: &#123;&#125;"</span>.format(time.time() - start)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>setDaemon 设置为 True, run 函数中不需要退出，主线程结束后所有子线程退出<br>如果 setDaemon 设置为 False, 则改为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> self.queue.empty():</span><br><span class="line">        msg = self.queue.get()</span><br><span class="line">        print(msg)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        self.queue.task_done()</span><br></pre></td></tr></table></figure><p>并且在主函数结束前 join 所有线程</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><ul><li><p>向队列中添加数据项时并不会复制此数据项，线程间通信实际上是在线程间传递对象引用。如果你担心对象的共享状态，那你最好只传递不可修改的数据结构（如：整型、字符串或者元组）或者一个对象的深拷贝。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line"><span class="comment"># A thread that produces data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(out_q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># Produce some data</span></span><br><span class="line">        ...</span><br><span class="line">        out_q.put(copy.deepcopy(data))</span><br><span class="line"></span><br><span class="line"><span class="comment"># A thread that consumes data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">(in_q)</span>:</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># Get some data</span></span><br><span class="line">        data = in_q.get()</span><br><span class="line">        <span class="comment"># Process the data</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure></li><li><p>q.qsize() ， q.full() ， q.empty() 等实用方法可以获取一个队列的当前大小和状态。但要注意，这些方法都不是线程安全的。可能你对一个队列使用 empty() 判断出这个队列为空，但同时另外一个线程可能已经向这个队列中插入一个数据项。</p></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c12/p01_start_stop_thread.html" target="_blank" rel="noopener"><strong><em>python3-cookbook</em></strong> Chapter 12 ‘Concurrency-Starting and Stopping Threads’</a></p></li><li><p><a href="https://www.ibm.com/developerworks/aix/library/au-threadingpython/" target="_blank" rel="noopener"><strong><em>Practical threaded programming with Python</em></strong></a></p></li></ul><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/5" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/5</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-多线程编程&quot;&gt;&lt;a href=&quot;#python-多线程编程&quot; class=&quot;headerlink&quot; title=&quot;python 多线程编程&quot;&gt;&lt;/a&gt;python 多线程编程&lt;/h1&gt;&lt;h2 id=&quot;使用回调方式&quot;&gt;&lt;a href=&quot;#使用回调方式&quot;
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>thread local in python</title>
    <link href="http://yoursite.com/2018/11/13/thread-local-in-python/"/>
    <id>http://yoursite.com/2018/11/13/thread-local-in-python/</id>
    <published>2018-11-13T03:50:25.000Z</published>
    <updated>2018-11-13T03:50:25.000Z</updated>
    
    <content type="html"><![CDATA[<!-- TOC --><ul><li><a href="#thread-local-in-python">thread local in python</a><ul><li><a href="#%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">线程局部变量</a></li><li><a href="#%E4%B8%BB%E7%BA%BF%E7%A8%8B%E4%B9%9F%E6%9C%89%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F">主线程也有自己的线程局部变量</a></li><li><a href="#%E7%BB%A7%E6%89%BF-threadinglocal">继承 threading.local</a></li><li><a href="#%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B">应用实例</a></li></ul></li></ul><!-- /TOC --><h1 id="thread-local-in-python"><a href="#thread-local-in-python" class="headerlink" title="thread local in python"></a>thread local in python</h1><p>参考 <a href="http://slinkp.com/python-thread-locals-20171201.html" target="_blank" rel="noopener">Thread Locals in Python: Mostly easy</a></p><h2 id="线程局部变量"><a href="#线程局部变量" class="headerlink" title="线程局部变量"></a>线程局部变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">mydata = threading.local()</span><br><span class="line">mydata.x = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        mydata.x = self.name</span><br><span class="line">        <span class="keyword">print</span> mydata.x</span><br><span class="line"></span><br><span class="line">w1, w2 = Worker(), Worker()</span><br><span class="line">w1.start(); w2.start(); w1.join(); w1.join()</span><br></pre></td></tr></table></figure><pre><code>Thread-1Thread-2</code></pre><p>各线程独享自己的变量，但是使用全局变量 mydata</p><h2 id="主线程也有自己的线程局部变量"><a href="#主线程也有自己的线程局部变量" class="headerlink" title="主线程也有自己的线程局部变量"></a>主线程也有自己的线程局部变量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">mydata = threading.local()</span><br><span class="line">mydata.x = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        mydata.x[<span class="string">'message'</span>] = self.name</span><br><span class="line">        <span class="keyword">print</span> mydata.x[<span class="string">'message'</span>]</span><br><span class="line">w1, w2 = Worker(), Worker()</span><br><span class="line">w1.start(); w2.start(); w1.join(); w2.join()</span><br></pre></td></tr></table></figure><pre><code>Exception in thread Thread-1:Traceback (most recent call last):  File &quot;C:\Python27\lib\threading.py&quot;, line 801, in __bootstrap_inner    self.run()  File &quot;E:/learn/python/test/thread_local.py&quot;, line 15, in run    mydata.x[&apos;message&apos;] = self.nameAttributeError: &apos;thread._local&apos; object has no attribute &apos;x&apos;Exception in thread Thread-2:Traceback (most recent call last):  File &quot;C:\Python27\lib\threading.py&quot;, line 801, in __bootstrap_inner    self.run()  File &quot;E:/learn/python/test/thread_local.py&quot;, line 15, in run    mydata.x[&apos;message&apos;] = self.nameAttributeError: &apos;thread._local&apos; object has no attribute &apos;x&apos;</code></pre><p>线程 w1,w2 没有 x 属性，子线程与主线程拥有各自的变量</p><h2 id="继承-threading-local"><a href="#继承-threading-local" class="headerlink" title="继承 threading.local"></a>继承 threading.local</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyData</span><span class="params">(threading.local)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = &#123;&#125;</span><br><span class="line"></span><br><span class="line">mydata = MyData()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Worker</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        mydata.x[<span class="string">'message'</span>] = self.name</span><br><span class="line">        <span class="keyword">print</span> mydata.x[<span class="string">'message'</span>]</span><br><span class="line"></span><br><span class="line">w1, w2 = Worker(), Worker()</span><br><span class="line">w1.start(); w2.start(); w1.join(); w2.join()</span><br></pre></td></tr></table></figure><pre><code>Thread-1Thread-2</code></pre><h2 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h2><p>bottle 0.4.10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span><span class="params">(threading.local)</span>:</span></span><br><span class="line">    <span class="string">""" Represents a single request using thread-local namespace. """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bind</span><span class="params">(self, environ)</span>:</span></span><br><span class="line">        <span class="string">""" Binds the enviroment of the current request to this request handler """</span></span><br><span class="line">        self._environ = environ</span><br><span class="line">        self._GET = <span class="literal">None</span></span><br><span class="line">        self._POST = <span class="literal">None</span></span><br><span class="line">        self._GETPOST = <span class="literal">None</span></span><br><span class="line">        self._COOKIES = <span class="literal">None</span></span><br><span class="line">        self.path = self._environ.get(<span class="string">'PATH_INFO'</span>, <span class="string">'/'</span>).strip()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.path.startswith(<span class="string">'/'</span>):</span><br><span class="line">            self.path = <span class="string">'/'</span> + self.path</span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------</span></span><br><span class="line">request = Request()</span><br><span class="line"><span class="comment">#----------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">WSGIHandler</span><span class="params">(environ, start_response)</span>:</span></span><br><span class="line">    <span class="string">"""The bottle WSGI-handler."""</span></span><br><span class="line">    <span class="keyword">global</span> request</span><br><span class="line">    <span class="keyword">global</span> response</span><br><span class="line">    request.bind(environ)</span><br><span class="line">    response.bind()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        handler, args = match_url(request.path, request.method)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> handler:</span><br><span class="line">            <span class="keyword">raise</span> HTTPError(<span class="number">404</span>, <span class="string">"Not found"</span>)</span><br><span class="line">        output = handler(**args)</span><br><span class="line">    <span class="keyword">except</span> BreakTheBottle, shard:</span><br><span class="line">        output = shard.output</span><br></pre></td></tr></table></figure><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/4" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/4</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- TOC --&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#thread-local-in-python&quot;&gt;thread local in python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%E7%BA%BF%E7%A8%8B%E5%B1%80%E9%83%A8%E
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>frp 配置 http、websocket、ssh 转发</title>
    <link href="http://yoursite.com/2018/11/07/frp--pei-zhi--http%E3%80%81websocket%E3%80%81ssh--zhuan-fa/"/>
    <id>http://yoursite.com/2018/11/07/frp--pei-zhi--http%E3%80%81websocket%E3%80%81ssh--zhuan-fa/</id>
    <published>2018-11-07T06:37:56.000Z</published>
    <updated>2018-11-07T06:37:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="frp-配置-http、websocket、ssh-转发"><a href="#frp-配置-http、websocket、ssh-转发" class="headerlink" title="frp 配置 http、websocket、ssh 转发"></a>frp 配置 http、websocket、ssh 转发</h1><p>参考 <a href="https://github.com/fatedier/frp/issues/75" target="_blank" rel="noopener">frp#75</a></p><h2 id="http-不使用域名转发"><a href="#http-不使用域名转发" class="headerlink" title="http 不使用域名转发"></a>http 不使用域名转发</h2><p><code>frps.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span></span><br></pre></td></tr></table></figure><p><code>frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = aaa.bbb.ccc.ddd</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tcp_port]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">2333</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">3333</span></span><br></pre></td></tr></table></figure><p>在外网通过 <a href="http://aaa.bbb.ccc.ddd:3333" target="_blank" rel="noopener">http://aaa.bbb.ccc.ddd:3333</a> 访问到内网机器里的 <a href="http://127.0.0.1:2333" target="_blank" rel="noopener">http://127.0.0.1:2333</a> 了</p><h2 id="ssh-转发"><a href="#ssh-转发" class="headerlink" title="ssh 转发"></a>ssh 转发</h2><p><code>frpc.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = aaa.bbb.ccc.ddd</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">7022</span></span><br><span class="line"></span><br><span class="line"><span class="section">[tcp_port]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">192.168</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8888</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">8888</span></span><br></pre></td></tr></table></figure><p>在外网 <code>ssh</code> 通过 <code>ssh -oPort=7022 user@aaa.bbb.ccc.ddd</code> 访问内网机器</p><p>在外网 <code>http</code> 通过 <a href="http://aaa.bbb.ccc.ddd:8888" target="_blank" rel="noopener">http://aaa.bbb.ccc.ddd:8888</a> 访问到内网机器里的 <a href="http://127.0.0.1:8888" target="_blank" rel="noopener">http://127.0.0.1:8888</a> 了</p><p>通过 <code>ws://aaa.bbb.ccc.ddd:8888</code> 访问 websocket</p><h2 id="运行服务"><a href="#运行服务" class="headerlink" title="运行服务"></a>运行服务</h2><p><code>nohup ./frps -c ./frps.ini &amp;</code></p><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/3" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/3</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;frp-配置-http、websocket、ssh-转发&quot;&gt;&lt;a href=&quot;#frp-配置-http、websocket、ssh-转发&quot; class=&quot;headerlink&quot; title=&quot;frp 配置 http、websocket、ssh 转发&quot;&gt;&lt;/a&gt;fr
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python json 序列化及反序列化</title>
    <link href="http://yoursite.com/2018/11/01/python-json--xu-lie-hua-ji-fan-xu-lie-hua/"/>
    <id>http://yoursite.com/2018/11/01/python-json--xu-lie-hua-ji-fan-xu-lie-hua/</id>
    <published>2018-11-01T08:10:50.000Z</published>
    <updated>2018-11-01T08:10:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="python-json-序列化及反序列化"><a href="#python-json-序列化及反序列化" class="headerlink" title="python json 序列化及反序列化"></a>python json 序列化及反序列化</h1><!-- TOC --><ul><li><a href="#python-json-%E5%BA%8F%E5%88%97%E5%8C%96%E5%8F%8A%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">python json 序列化及反序列化</a><ul><li><a href="#%E4%BD%BF%E7%94%A8namedtuple">使用<code>namedtuple</code></a></li><li><a href="#%E4%BD%BF%E7%94%A8objecthook">使用<code>object_hook</code></a></li><li><a href="#%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7">获取对象属性</a></li><li><a href="#%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B5%8C%E5%A5%97%E5%B1%9E%E6%80%A7">获取对象的嵌套属性</a></li></ul></li></ul><!-- /TOC --><h2 id="使用namedtuple"><a href="#使用namedtuple" class="headerlink" title="使用namedtuple"></a>使用<code>namedtuple</code></h2><p>反序列化为 namedtuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"></span><br><span class="line">data = <span class="string">'&#123;"name": "John Smith", "hometown": &#123;"name": "New York", "id": 123&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Parse JSON into an object with attributes corresponding to dict keys.</span></span><br><span class="line">x = json.loads(data, object_hook=<span class="keyword">lambda</span> d: namedtuple(<span class="string">'X'</span>, d.keys())(*d.values()))</span><br><span class="line"><span class="keyword">print</span> x.name, x.hometown.name, x.hometown.id</span><br></pre></td></tr></table></figure><p>序列化为 json</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(x._asdict())</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;"hometown": ["New York", 123], "name": "John Smith"&#125;</span><br></pre></td></tr></table></figure><p>封装：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_json_object_hook</span><span class="params">(d)</span>:</span> <span class="keyword">return</span> namedtuple(<span class="string">'X'</span>, d.keys())(*d.values())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">json2obj</span><span class="params">(data)</span>:</span> <span class="keyword">return</span> json.loads(data, object_hook=_json_object_hook)</span><br><span class="line"></span><br><span class="line">x = json2obj(data)</span><br></pre></td></tr></table></figure><p>总结：</p><p>序列化及反序列化都比较方便，但是 <code>namedtuple</code> 不能进行复制，不能修改</p><h2 id="使用object-hook"><a href="#使用object-hook" class="headerlink" title="使用object_hook"></a>使用<code>object_hook</code></h2><p>反序列化为对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONObject</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, d)</span>:</span></span><br><span class="line">        self.__dict__ = d</span><br><span class="line"></span><br><span class="line">data = <span class="string">'&#123;"name": "John Smith", "hometown": &#123;"name": "New York", "id": 123&#125;&#125;'</span></span><br><span class="line"></span><br><span class="line">a = json.loads(data,</span><br><span class="line">               object_hook=JSONObject)</span><br><span class="line"></span><br><span class="line">a.name = <span class="string">"changed"</span></span><br><span class="line"><span class="keyword">print</span> a.name</span><br></pre></td></tr></table></figure><h2 id="获取对象属性"><a href="#获取对象属性" class="headerlink" title="获取对象属性"></a>获取对象属性</h2><ul><li>使用 <code>getattr</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> getattr(a.hometown, <span class="string">'id'</span>, <span class="number">321</span>)</span><br><span class="line"><span class="comment"># 123</span></span><br><span class="line"><span class="keyword">print</span> getattr(a.hometown, <span class="string">'id1'</span>, <span class="number">321</span>)</span><br><span class="line"><span class="comment"># 321</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>try</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">print</span> a.hometown.id2</span><br><span class="line"><span class="keyword">except</span> AttributeError <span class="keyword">as</span> ex:</span><br><span class="line">    <span class="keyword">print</span> ex</span><br></pre></td></tr></table></figure><ul><li>使用 <code>get</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = data.get(<span class="string">'first'</span>, &#123;&#125;).get(<span class="string">'second'</span>, &#123;&#125;).get(<span class="string">'third'</span>, <span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h2 id="获取对象的嵌套属性"><a href="#获取对象的嵌套属性" class="headerlink" title="获取对象的嵌套属性"></a>获取对象的嵌套属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_getattr</span><span class="params">(obj, attr, default = None)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Get a named attribute from an object; multi_getattr(x, 'a.b.c.d') is</span></span><br><span class="line"><span class="string">    equivalent to x.a.b.c.d. When a default argument is given, it is</span></span><br><span class="line"><span class="string">    returned when any attribute in the chain doesn't exist; without</span></span><br><span class="line"><span class="string">    it, an exception is raised when a missing attribute is encountered.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    attributes = attr.split(<span class="string">"."</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> attributes:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            obj = getattr(obj, i)</span><br><span class="line">        <span class="keyword">except</span> AttributeError:</span><br><span class="line">            <span class="keyword">if</span> default:</span><br><span class="line">                <span class="keyword">return</span> default</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> multi_getattr(a, <span class="string">"hometown.name"</span>)</span><br><span class="line"><span class="comment"># New York</span></span><br><span class="line"><span class="keyword">print</span> multi_getattr(a, <span class="string">"hometown.name1"</span>, <span class="string">"abc"</span>)</span><br><span class="line"><span class="comment"># abc</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> unicode_literals</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line">_default_stub = object()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deep_get</span><span class="params">(obj, path, default=_default_stub, separator=<span class="string">'.'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""Gets arbitrarily nested attribute or item value.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        obj: Object to search in.</span></span><br><span class="line"><span class="string">        path (str, hashable, iterable of hashables): Arbitrarily nested path in obj hierarchy.</span></span><br><span class="line"><span class="string">        default: Default value. When provided it is returned if the path doesn't exist.</span></span><br><span class="line"><span class="string">            Otherwise the call raises a LookupError.</span></span><br><span class="line"><span class="string">        separator: String to split path by.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        Value at path.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises:</span></span><br><span class="line"><span class="string">        LookupError: If object at path doesn't exist.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Examples:</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; deep_get(&#123;'a': 1&#125;, 'a')</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; deep_get(&#123;'a': 1&#125;, 'b')</span></span><br><span class="line"><span class="string">        Traceback (most recent call last):</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string">        LookupError: &#123;u'a': 1&#125; has no element at 'b'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; deep_get(['a', 'b', 'c'], -1)</span></span><br><span class="line"><span class="string">        u'c'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; deep_get(&#123;'a': [&#123;'b': [1, 2, 3]&#125;, 'some string']&#125;, 'a.0.b')</span></span><br><span class="line"><span class="string">        [1, 2, 3]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; class A(object):</span></span><br><span class="line"><span class="string">        ...     def __init__(self):</span></span><br><span class="line"><span class="string">        ...         self.x = self</span></span><br><span class="line"><span class="string">        ...         self.y = &#123;'a': 10&#125;</span></span><br><span class="line"><span class="string">        ...</span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; deep_get(A(), 'x.x.x.x.x.x.y.a')</span></span><br><span class="line"><span class="string">        10</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; deep_get(&#123;'a.b': &#123;'c': 1&#125;&#125;, 'a.b.c')</span></span><br><span class="line"><span class="string">        Traceback (most recent call last):</span></span><br><span class="line"><span class="string">            ...</span></span><br><span class="line"><span class="string">        LookupError: &#123;u'a.b': &#123;u'c': 1&#125;&#125; has no element at 'a'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; deep_get(&#123;'a.b': &#123;'Привет': 1&#125;&#125;, ['a.b', 'Привет'])</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &gt;&gt;&gt; deep_get(&#123;'a.b': &#123;'Привет': 1&#125;&#125;, 'a.b/Привет', separator='/')</span></span><br><span class="line"><span class="string">        1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(path, basestring):</span><br><span class="line">        attributes = path.split(separator)</span><br><span class="line">    <span class="keyword">elif</span> isinstance(path, collections.Iterable):</span><br><span class="line">        attributes = path</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        attributes = [path]</span><br><span class="line"></span><br><span class="line">    LOOKUPS = [getattr, operator.getitem, <span class="keyword">lambda</span> obj, i: obj[int(i)]]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> attributes:</span><br><span class="line">            <span class="keyword">for</span> lookup <span class="keyword">in</span> LOOKUPS:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    obj = lookup(obj, i)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span> (TypeError, AttributeError, IndexError, KeyError,</span><br><span class="line">                        UnicodeEncodeError, ValueError):</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                msg = <span class="string">"&#123;obj&#125; has no element at '&#123;i&#125;'"</span>.format(obj=obj, i=i)</span><br><span class="line">                <span class="keyword">raise</span> LookupError(msg.encode(<span class="string">'utf8'</span>))</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">if</span> _default_stub != default:</span><br><span class="line">            <span class="keyword">return</span> default</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/2" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/2</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;python-json-序列化及反序列化&quot;&gt;&lt;a href=&quot;#python-json-序列化及反序列化&quot; class=&quot;headerlink&quot; title=&quot;python json 序列化及反序列化&quot;&gt;&lt;/a&gt;python json 序列化及反序列化&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>tornado-异步上下文管理（StackContext）</title>
    <link href="http://yoursite.com/2018/10/17/tornado--yi-bu-shang-xia-wen-guan-li-%EF%BC%88stackcontext%EF%BC%89/"/>
    <id>http://yoursite.com/2018/10/17/tornado--yi-bu-shang-xia-wen-guan-li-%EF%BC%88stackcontext%EF%BC%89/</id>
    <published>2018-10-17T05:18:50.000Z</published>
    <updated>2018-10-17T05:53:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tornado-异步上下文管理（StackContext）"><a href="#tornado-异步上下文管理（StackContext）" class="headerlink" title="tornado - 异步上下文管理（StackContext）"></a>tornado - 异步上下文管理（StackContext）</h1><h2 id="初步使用"><a href="#初步使用" class="headerlink" title="初步使用"></a>初步使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.stack_context</span><br><span class="line"></span><br><span class="line">ioloop = tornado.ioloop.IOLoop.instance()</span><br><span class="line"></span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run callback'</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'except in callback'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times</span><br><span class="line">    times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run async task &#123;&#125;'</span>.format(times)</span><br><span class="line">    ioloop.add_callback(callback=callback)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        async_task()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'main exception &#123;&#125;'</span>.format(e)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'end'</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">ioloop.start()</span><br></pre></td></tr></table></figure><p>异常没有在 main 中捕获：</p><pre><code>run async task 1endrun callbackERROR:root:Exception in callback &lt;function null_wrapper at 0x7f23ec300488&gt;Traceback (most recent call last):  File &quot;~/learn/tornado/tornado/ioloop.py&quot;, line 370, in _run_callback</code></pre><h2 id="包裹上下文"><a href="#包裹上下文" class="headerlink" title="包裹上下文"></a>包裹上下文</h2><p>使用 partial 生成新的函数, 最终调用的函数为 wrapper(callback)，在 wrapper 中捕获异常</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.stack_context</span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"></span><br><span class="line">ioloop = tornado.ioloop.IOLoop.instance()</span><br><span class="line"></span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run callback'</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'except in callback'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        func()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'main exception &#123;&#125;'</span>.format(e)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times</span><br><span class="line">    times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run async task &#123;&#125;'</span>.format(times)</span><br><span class="line">    <span class="comment"># 使用 partial 生成新的函数</span></span><br><span class="line">    <span class="comment"># 最终 ioloop 调用的函数为 wrapper(callback)</span></span><br><span class="line">    ioloop.add_callback(callback=functools.partial(wrapper, callback))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        async_task()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'main exception &#123;&#125;'</span>.format(e)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'end'</span></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">ioloop.start()</span><br></pre></td></tr></table></figure><p>异常被正确捕获：</p><pre><code>run async task 1endrun callbackmain exception except in callback</code></pre><h2 id="使用-tornado-stack-context-例子"><a href="#使用-tornado-stack-context-例子" class="headerlink" title="使用 tornado stack_context 例子"></a>使用 tornado stack_context 例子</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.stack_context</span><br><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line">ioloop = tornado.ioloop.IOLoop.instance()</span><br><span class="line"></span><br><span class="line">times = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Run callback'</span></span><br><span class="line">    <span class="comment"># 抛出的异常在 contextor 中被捕获</span></span><br><span class="line">    <span class="keyword">raise</span> ValueError(<span class="string">'except in callback'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">async_task</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> times</span><br><span class="line">    times += <span class="number">1</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'run async task &#123;&#125;'</span>.format(times)</span><br><span class="line">    <span class="comment"># add_callback, 会用之前保存的 (StackContext, contextor)，创建一个对象 StackContext(contextor)</span></span><br><span class="line">    <span class="comment"># ioloop 回调的时候使用 </span></span><br><span class="line">    <span class="comment"># with StackContext(contextor)</span></span><br><span class="line">    <span class="comment">#   callback</span></span><br><span class="line">    <span class="comment"># 从而 callback 函数也在 contextor 函数中执行，从而能够在 contextor 中捕获异常</span></span><br><span class="line">    <span class="comment"># 从而实现 async_task() 函数在 contextor 中执行，其引发的异常（其实是 callback）同时在 contextor 被捕获</span></span><br><span class="line">    ioloop.add_callback(callback=callback)</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">contextor</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Enter contextor'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Handler except'</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'exception &#123;&#125;'</span>.format(e)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Release'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment">#使用StackContext包裹住contextor, 下面函数 async_task() 会在 contextor() 环境中执行</span></span><br><span class="line">    stack_context = tornado.stack_context.StackContext(contextor)</span><br><span class="line">    <span class="keyword">with</span> stack_context:</span><br><span class="line">        async_task()</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'End'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">ioloop.start()</span><br></pre></td></tr></table></figure><h3 id="tornado-stack-context-StackContext"><a href="#tornado-stack-context-StackContext" class="headerlink" title="tornado.stack_context.StackContext"></a>tornado.stack_context.StackContext</h3><p>tornado.stack_context 相当于一个上下文包裹器，它接收一个 context_factory 作为参数并保存<br>context_factory 是一个上下文类，拥有 <code>__enter__</code> <code>__exit__</code>方法</p><p>使用 with stack_context 时候，执行自己的 <code>__enter__</code><br><code>__enter__</code> 函数根据保存的 context_factory 创建一个 context 对象，并执行对象的 <code>__enter__</code>方法<br>StackContext 将 (StackContext, context_factory) 保存，将来执行回调的时候再创建一个 StackContext(context_factory) 来执行 call_back</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackContext</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, context_factory)</span>:</span></span><br><span class="line">        self.context_factory = context_factory</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># contexts 入栈</span></span><br><span class="line">        self.old_contexts = _state.contexts</span><br><span class="line">        <span class="comment"># _state.contexts is a tuple of (class, arg) pairs</span></span><br><span class="line">        _state.contexts = (self.old_contexts + </span><br><span class="line">                           ((StackContext, self.context_factory),))</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.context = self.context_factory()</span><br><span class="line">            <span class="comment"># 进入 context 对象的执行环境</span></span><br><span class="line">            self.context.__enter__()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            _state.contexts = self.old_contexts</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, type, value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> self.context.__exit__(type, value, traceback)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># contexts 出栈</span></span><br><span class="line">            _state.contexts = self.old_contexts</span><br></pre></td></tr></table></figure><h3 id="IOLoop-add-callback"><a href="#IOLoop-add-callback" class="headerlink" title="IOLoop.add_callback"></a>IOLoop.add_callback</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_callback</span><span class="params">(self, callback)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self._callbacks:</span><br><span class="line">        self._wake()</span><br><span class="line">        self._callbacks.append(stack_context.wrap(callback))</span><br></pre></td></tr></table></figure><h3 id="IOLoop-start"><a href="#IOLoop-start" class="headerlink" title="IOLoop.start"></a>IOLoop.start</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> self._stopped:</span><br><span class="line">        self._stopped = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self._running = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># Never use an infinite timeout here - it can stall epoll</span></span><br><span class="line">        poll_timeout = <span class="number">0.2</span></span><br><span class="line"></span><br><span class="line">        callbacks = self._callbacks</span><br><span class="line">        self._callbacks = []</span><br><span class="line">        <span class="keyword">for</span> callback <span class="keyword">in</span> callbacks:</span><br><span class="line">            <span class="comment"># 调用注册的 callback</span></span><br><span class="line">            self._run_callback(callback)</span><br></pre></td></tr></table></figure><h3 id="IOLoop-run-callback"><a href="#IOLoop-run-callback" class="headerlink" title="IOLoop._run_callback"></a>IOLoop._run_callback</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_run_callback</span><span class="params">(self, callback)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        callback()</span><br><span class="line">    <span class="keyword">except</span> (KeyboardInterrupt, SystemExit):</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        self.handle_callback_exception(callback)</span><br></pre></td></tr></table></figure><h3 id="stack-context-wrap"><a href="#stack-context-wrap" class="headerlink" title="stack_context.wrap"></a>stack_context.wrap</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wrap</span><span class="params">(fn)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> fn <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> fn.__class__ <span class="keyword">is</span> _StackContextWrapper:</span><br><span class="line">        <span class="keyword">return</span> fn</span><br><span class="line">    <span class="comment"># functools.wraps doesn't appear to work on functools.partial objects</span></span><br><span class="line">    <span class="comment">#@functools.wraps(fn)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapped</span><span class="params">(callback, contexts, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> contexts <span class="keyword">is</span> _state.contexts <span class="keyword">or</span> <span class="keyword">not</span> contexts:</span><br><span class="line">            callback(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 包裹callback, 生成 StackContext(context_factory()) 对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> _state.contexts:</span><br><span class="line">            new_contexts = [cls(arg) <span class="keyword">for</span> (cls, arg) <span class="keyword">in</span> contexts]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> (len(_state.contexts) &gt; len(contexts) <span class="keyword">or</span></span><br><span class="line">            any(a[<span class="number">1</span>] <span class="keyword">is</span> <span class="keyword">not</span> b[<span class="number">1</span>]</span><br><span class="line">                <span class="keyword">for</span> a, b <span class="keyword">in</span> itertools.izip(_state.contexts, contexts))):</span><br><span class="line">            <span class="comment"># contexts have been removed or changed, so start over</span></span><br><span class="line">            new_contexts = ([NullContext()] +</span><br><span class="line">                            [cls(arg) <span class="keyword">for</span> (cls,arg) <span class="keyword">in</span> contexts])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new_contexts = [cls(arg)</span><br><span class="line">                            <span class="keyword">for</span> (cls, arg) <span class="keyword">in</span> contexts[len(_state.contexts):]]</span><br><span class="line">        <span class="keyword">if</span> len(new_contexts) &gt; <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">with</span> _nested(*new_contexts):</span><br><span class="line">                callback(*args, **kwargs)</span><br><span class="line">        <span class="keyword">elif</span> new_contexts:</span><br><span class="line">            <span class="comment"># 执行 StackContext，调用 fn</span></span><br><span class="line">            <span class="keyword">with</span> new_contexts[<span class="number">0</span>]:</span><br><span class="line">                callback(*args, **kwargs)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            callback(*args, **kwargs)</span><br><span class="line">    <span class="comment"># 返回偏函数，绑定 fn, _state.contexts</span></span><br><span class="line">    <span class="keyword">return</span> _StackContextWrapper(wrapped, fn, _state.contexts)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_StackContextWrapper</span><span class="params">(functools.partial)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><hr><p>Sync From: <a href="https://github.com/TheBigFish/blog/issues/1" target="_blank" rel="noopener">https://github.com/TheBigFish/blog/issues/1</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tornado-异步上下文管理（StackContext）&quot;&gt;&lt;a href=&quot;#tornado-异步上下文管理（StackContext）&quot; class=&quot;headerlink&quot; title=&quot;tornado - 异步上下文管理（StackContext）&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
